{
  "stats": {
    "suites": 63,
    "tests": 189,
    "passes": 189,
    "pending": 0,
    "failures": 0,
    "start": "2018-04-04T20:01:28.973Z",
    "end": "2018-04-04T20:04:13.284Z",
    "duration": 164311,
    "testsRegistered": 189,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "039c1bc6-1bba-4f48-8954-8b145cf4a1e1",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "e780e078-e359-4d0f-bc26-1c2eda0a9152",
        "title": "ValidatorMetadataNew",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "ValidatorMetadataNew \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "7cb347e6-b04e-4295-96de-7a763a925151",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "ValidatorMetadataNew \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "725ccb5b-64d5-47da-b901-9272eb5fcbc0",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "ValidatorMetadataNew \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "033fa064-68b7-4d9a-951f-0d902c0f1178",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "3504ab98-82b7-4c6f-b9dd-d2163cf0f2c0",
        "title": "BallotsStorageMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "BallotsStorageMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "f549e92c-74c8-4cde-97d7-8938d24b08d6",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "BallotsStorageMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "e7e1a844-bcc5-46ff-82af-87b73f3a7368",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "BallotsStorageMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "21e00f80-e40a-4427-983d-c1133e63829f",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "bf95504b-2a75-432d-9177-20bdb1241e34",
        "title": "EternalStorageProxyMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "EternalStorageProxyMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "23b8c614-ac71-4e8c-9fb9-23cfbfd662c2",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "EternalStorageProxyMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "8a1fca0c-22b1-43c3-be2c-fdd9302e053a",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "EternalStorageProxyMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "4bace8bd-0e66-4bf3-89d1-e22377e6a635",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "7bbe9c44-de3c-45e5-9953-95c362b953e3",
        "title": "KeysManagerMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "KeysManagerMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "a491facb-49ea-4a2b-be28-a0bcefc11f81",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "KeysManagerMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "9fd621e1-3d9e-496d-9bf1-4b4716a0159e",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "KeysManagerMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "ed1abcba-9f64-4963-a44e-81bff6701e29",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "e185918a-6b3a-4d97-acd1-648f8904f542",
        "title": "PoaNetworkConsensusMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "PoaNetworkConsensusMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "2f8b6a6f-cb0b-4d2e-802b-08d17e8d655c",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "PoaNetworkConsensusMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "608071e4-af36-445d-be49-c6331a97bb88",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "PoaNetworkConsensusMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "57607c3e-f28f-4101-ba03-33c9e21c3686",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "853a8247-6ed6-4342-9bc9-2e0b8ed35f24",
        "title": "ProxyStorageMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "ProxyStorageMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "36fdaa0f-4704-463a-be02-8e26143112b7",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "ProxyStorageMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "a6df6230-736f-47d0-b128-8eaac6a8f4ac",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "ProxyStorageMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "08913205-d5a4-4e2f-9a6a-0ccd048fbc66",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "7bb1446b-01d4-41fc-828f-d2bf7b8f93a8",
        "title": "ValidatorMetadataMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "ValidatorMetadataMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "436245cb-3190-47f1-a60c-9cef5924a340",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "ValidatorMetadataMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "250b6ab7-4b76-4a26-875d-37d0339d921a",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "ValidatorMetadataMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "84311564-3a63-4361-bda1-f7c8ce40a4df",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "6b28dfb8-a18e-4c8c-95ec-83bcf0ba776c",
        "title": "VotingToChangeKeysMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "VotingToChangeKeysMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "dc667b59-2845-4fd3-b8c8-394cc3577fee",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "VotingToChangeKeysMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "3adfc3e5-ef20-449e-8214-91fc23a9568b",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "VotingToChangeKeysMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "95e2328e-926c-424f-b54e-64e970a08fc6",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "598a81b1-ec3c-45fe-b843-bcd63888b019",
        "title": "VotingToChangeMinThresholdMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "VotingToChangeMinThresholdMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "96d3b8e3-4440-424a-a8ad-0bb59f5ce797",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "VotingToChangeMinThresholdMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "780a4d97-bd5f-44fe-946a-3e04a2a4c9d5",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "VotingToChangeMinThresholdMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "51634d5d-3223-411e-8d94-a562848464f4",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "d4b9b3e5-cd8f-4a38-b18f-d7c91d95c2e0",
        "title": "VotingToChangeProxyAddressMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "VotingToChangeProxyAddressMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "6f16ed0a-7379-445b-b62c-97c7e8b3a5fc",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "VotingToChangeProxyAddressMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "467d792f-4726-46f4-b6ae-e1335718d0b2",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "VotingToChangeProxyAddressMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "8db6ba44-307d-4653-95de-2f1417afeb14",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "f85f41a2-f94b-4500-823d-efaa257b07c0",
        "title": "Contract: BallotsStorage [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_test.js",
        "file": "/test/ballots_storage_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: BallotsStorage [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 88,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "85f76f49-c550-4f23-8c5d-a53381c345a6",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: BallotsStorage [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "28218fc6-6fa1-45cc-8291-35df68012bba",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: BallotsStorage [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 277,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "poaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony, []);\nproxyStorage = await ProxyStorageMock.new(poaNetworkConsensus.address);\nballotsStorageMock = await BallotsStorageMock.new(proxyStorage.address);\nkeysManager = await KeysManagerMock.new(proxyStorage.address, poaNetworkConsensus.address, masterOfCeremony, \"0x0000000000000000000000000000000000000000\");\nawait poaNetworkConsensus.setProxyStorage(proxyStorage.address);\nawait proxyStorage.initializeAddresses(\n  keysManager.address,\n  votingToChangeKeys,\n  votingToChangeMinThreshold,\n  votingToChangeProxy,\n  ballotsStorageMock.address,\n  validatorMetadataEternalStorage\n);",
            "err": {},
            "isRoot": false,
            "uuid": "35880b96-9739-4f66-a85f-d165eeb62325",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: BallotsStorage [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "a0301efb-f9c7-4b8a-9aeb-7542134bea95",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "cd797927-e79a-462d-9054-11daa4d1cb5a",
            "title": "#constructor",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_test.js",
            "file": "/test/ballots_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "sets MoC and Poa",
                "fullTitle": "Contract: BallotsStorage [all features] #constructor sets MoC and Poa",
                "timedOut": false,
                "duration": 35,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new web3.BigNumber(3).should.be.bignumber.equal(\n  await ballotsStorageMock.getBallotThreshold(1)\n);\nnew web3.BigNumber(2).should.be.bignumber.equal(\n  await ballotsStorageMock.getBallotThreshold(2)\n);",
                "err": {},
                "isRoot": false,
                "uuid": "9835f369-1030-4f03-bd5b-780f57ccd17a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9835f369-1030-4f03-bd5b-780f57ccd17a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 35,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "cd650cc0-68b5-4a4f-ad4f-aefcbd002cc7",
            "title": "#setThreshold",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_test.js",
            "file": "/test/ballots_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "can only be called from votingToChangeThreshold address",
                "fullTitle": "Contract: BallotsStorage [all features] #setThreshold can only be called from votingToChangeThreshold address",
                "timedOut": false,
                "duration": 106,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await ballotsStorageMock.setThreshold(4, 1, {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorageMock.setThreshold(4, 1, {from: accounts[3]}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "bbcb0249-e5a1-4e7e-8c79-466c1a9b9a39",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be set for Invalid threshold",
                "fullTitle": "Contract: BallotsStorage [all features] #setThreshold cannot be set for Invalid threshold",
                "timedOut": false,
                "duration": 138,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await ballotsStorageMock.setThreshold(5, 0, {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorageMock.setThreshold(5, -10, {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorageMock.setThreshold(5, -1, {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorageMock.setThreshold(5, 3, {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "8e5326c0-9dd9-4fc2-9897-e50ef0113d0a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new value cannot be equal to 0",
                "fullTitle": "Contract: BallotsStorage [all features] #setThreshold new value cannot be equal to 0",
                "timedOut": false,
                "duration": 135,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await ballotsStorageMock.setThreshold(0, 1, {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorageMock.setThreshold(0, 2, {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorageMock.setThreshold(4, 1, {from: accounts[3]}).should.be.fulfilled;\nawait ballotsStorageMock.setThreshold(4, 2, {from: accounts[3]}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "dda740c7-d968-40bd-80d6-d1f4b384444e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets new value for Keys threshold",
                "fullTitle": "Contract: BallotsStorage [all features] #setThreshold sets new value for Keys threshold",
                "timedOut": false,
                "duration": 46,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await ballotsStorageMock.setThreshold(5, 1, {from: accounts[3]}).should.be.fulfilled; \nnew web3.BigNumber(5).should.be.bignumber.equal(await ballotsStorageMock.getBallotThreshold(1));",
                "err": {},
                "isRoot": false,
                "uuid": "efeb73b0-cbdc-4167-918f-7b785a1ca915",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets new value for MetadataChange threshold",
                "fullTitle": "Contract: BallotsStorage [all features] #setThreshold sets new value for MetadataChange threshold",
                "timedOut": false,
                "duration": 55,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await ballotsStorageMock.setThreshold(6, 2, {from: accounts[3]}).should.be.fulfilled;\nnew web3.BigNumber(6).should.be.bignumber.equal(await ballotsStorageMock.getBallotThreshold(2));",
                "err": {},
                "isRoot": false,
                "uuid": "0c093b82-5542-471c-9af1-d1fe40ed2449",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "bbcb0249-e5a1-4e7e-8c79-466c1a9b9a39",
              "8e5326c0-9dd9-4fc2-9897-e50ef0113d0a",
              "dda740c7-d968-40bd-80d6-d1f4b384444e",
              "efeb73b0-cbdc-4167-918f-7b785a1ca915",
              "0c093b82-5542-471c-9af1-d1fe40ed2449"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 480,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "fd0614fe-f7b6-4f60-b344-e7aa250fa6ea",
            "title": "#getTotalNumberOfValidators",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_test.js",
            "file": "/test/ballots_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns total number of validators",
                "fullTitle": "Contract: BallotsStorage [all features] #getTotalNumberOfValidators returns total number of validators",
                "timedOut": false,
                "duration": 181,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setKeysManagerMock(masterOfCeremony);\nawait poaNetworkConsensus.addValidator(accounts[1], true);\nawait poaNetworkConsensus.setSystemAddress(masterOfCeremony);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nconst getValidators = await poaNetworkConsensus.getValidators();\nnew web3.BigNumber(2).should.be.bignumber.equal(getValidators.length);\nnew web3.BigNumber(2).should.be.bignumber.equal(await ballotsStorageMock.getTotalNumberOfValidators())",
                "err": {},
                "isRoot": false,
                "uuid": "8908984f-bbf0-4687-a57f-fa7ff3136d64",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8908984f-bbf0-4687-a57f-fa7ff3136d64"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 181,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "360c23b2-aef6-4a5a-91b5-df94493ac0d9",
            "title": "#getProxyThreshold",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_test.js",
            "file": "/test/ballots_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns total number of validators",
                "fullTitle": "Contract: BallotsStorage [all features] #getProxyThreshold returns total number of validators",
                "timedOut": false,
                "duration": 399,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new web3.BigNumber(1).should.be.bignumber.equal(await ballotsStorageMock.getProxyThreshold())\nawait proxyStorage.setKeysManagerMock(masterOfCeremony);\nawait poaNetworkConsensus.addValidator(accounts[1], true);\nawait poaNetworkConsensus.addValidator(accounts[2], true);\nawait poaNetworkConsensus.addValidator(accounts[3], true);\nawait poaNetworkConsensus.addValidator(accounts[4], true);\nawait poaNetworkConsensus.addValidator(accounts[5], true);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nconst getValidators = await poaNetworkConsensus.getValidators();\nnew web3.BigNumber(6).should.be.bignumber.equal(getValidators.length);\nnew web3.BigNumber(3).should.be.bignumber.equal(await ballotsStorageMock.getProxyThreshold())",
                "err": {},
                "isRoot": false,
                "uuid": "2020e6fb-6328-41bb-8771-4de4478eb8fe",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2020e6fb-6328-41bb-8771-4de4478eb8fe"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 399,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "50572d21-7d97-479f-b804-c07fca845ef5",
            "title": "#getVotingToChangeThreshold",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_test.js",
            "file": "/test/ballots_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns voting to change min threshold address",
                "fullTitle": "Contract: BallotsStorage [all features] #getVotingToChangeThreshold returns voting to change min threshold address",
                "timedOut": false,
                "duration": 61,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "votingToChangeMinThreshold.should.be.equal(await ballotsStorageMock.getVotingToChangeThreshold())\nawait proxyStorage.setVotingToChangeMinThresholdMock(accounts[4]);\naccounts[4].should.be.equal(await ballotsStorageMock.getVotingToChangeThreshold())",
                "err": {},
                "isRoot": false,
                "uuid": "3c3d41d9-adc0-4ba4-b9e2-ee654fc29ee9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3c3d41d9-adc0-4ba4-b9e2-ee654fc29ee9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 61,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "ca29329b-a8b6-43ea-ba4f-5c9daff88d9b",
            "title": "#getBallotLimit",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_test.js",
            "file": "/test/ballots_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns limit per validator to create ballots",
                "fullTitle": "Contract: BallotsStorage [all features] #getBallotLimit returns limit per validator to create ballots",
                "timedOut": false,
                "duration": 271,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let limit = await ballotsStorageMock.getBallotLimitPerValidator();\nlimit.should.be.bignumber.equal(200);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addMiningKey(accounts[2]).should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nlimit = await ballotsStorageMock.getBallotLimitPerValidator();\nlimit.should.be.bignumber.equal(100);",
                "err": {},
                "isRoot": false,
                "uuid": "da99cc1e-806b-4d8f-8936-65cd969e000c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "da99cc1e-806b-4d8f-8936-65cd969e000c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 271,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "00eaf619-190a-4299-a477-95c0fd91e0be",
        "title": "Contract: KeysManager [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
        "file": "/test/keys_manager_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: KeysManager [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 313,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "c85292d3-9a7a-4c10-a34d-1d91d171a62b",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: KeysManager [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "334b06c7-b9f6-4413-8119-3897c17df157",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: KeysManager [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 222,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "poaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony, []);\nproxyStorageMock = await ProxyStorageMock.new(poaNetworkConsensusMock.address);\nkeysManager = await KeysManagerMock.new(proxyStorageMock.address, poaNetworkConsensusMock.address, masterOfCeremony, \"0x0000000000000000000000000000000000000000\");\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\nawait proxyStorageMock.initializeAddresses(\n  keysManager.address,\n  masterOfCeremony,\n  masterOfCeremony,\n  masterOfCeremony,\n  masterOfCeremony,\n  masterOfCeremony\n);",
            "err": {},
            "isRoot": false,
            "uuid": "60a0b705-efe1-41f2-af68-d0a78b12b3e3",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: KeysManager [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "2067ba9d-6049-4f16-be5f-ce9f610a7a8f",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "4620b698-3a31-4954-bcc5-d245d7a7c604",
            "title": "#constructor",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "sets masterOfCeremony, proxyStorage, poaConsensus",
                "fullTitle": "Contract: KeysManager [all features] #constructor sets masterOfCeremony, proxyStorage, poaConsensus",
                "timedOut": false,
                "duration": 83,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "masterOfCeremony.should.be.equal(await keysManager.masterOfCeremony());\nproxyStorageMock.address.should.be.equal(await keysManager.proxyStorage());\npoaNetworkConsensusMock.address.should.be.equal(await keysManager.poaNetworkConsensus());",
                "err": {},
                "isRoot": false,
                "uuid": "32a3294c-4821-4232-9f6b-fd46c899dbae",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "adds masterOfCeremony to validators hash",
                "fullTitle": "Contract: KeysManager [all features] #constructor adds masterOfCeremony to validators hash",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const validator = await keysManager.validatorKeys(masterOfCeremony);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "0b1d9917-c19a-4338-b5d7-817189162353",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "32a3294c-4821-4232-9f6b-fd46c899dbae",
              "0b1d9917-c19a-4338-b5d7-817189162353"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 98,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "e8e1d8eb-a7d0-423b-bbad-a04e00739c3d",
            "title": "#initiateKeys",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "can only be called by master of ceremony",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys can only be called by master of ceremony",
                "timedOut": false,
                "duration": 54,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "645d1fa0-eda5-4b1f-8312-19d0a7241039",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot allow 0x0 addresses",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys cannot allow 0x0 addresses",
                "timedOut": false,
                "duration": 39,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys('0x0000000000000000000000000000000000000000').should.be.rejectedWith(ERROR_MSG);\nawait keysManager.initiateKeys('0x0').should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "72722ea6-6f4e-4eea-9875-2cd8d2a08f97",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow to initialize already initialized key",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys should not allow to initialize already initialized key",
                "timedOut": false,
                "duration": 59,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.fulfilled;   \nawait keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "75cc9d72-3aa5-40c2-8508-49f469fd4769",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow to initialize already initialized key after validator created mining key",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys should not allow to initialize already initialized key after validator created mining key",
                "timedOut": false,
                "duration": 157,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.fulfilled;   \nawait keysManager.createKeys(accounts[3],accounts[4],accounts[5], {from: accounts[2]}).should.be.fulfilled;\nawait keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "fb2b74ec-6f10-4da1-a8b2-4d22cd7cba88",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not equal to master of ceremony",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys should not equal to master of ceremony",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(masterOfCeremony, {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "87831a53-3f31-49d6-8e84-606fa598f6cc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow to initialize more than maxNumberOfInitialKeys",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys should not allow to initialize more than maxNumberOfInitialKeys",
                "timedOut": false,
                "duration": 130,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.setMaxNumberOfInitialKeys(2);\nlet maxNumberOfInitialKeys = await keysManager.maxNumberOfInitialKeys();\nmaxNumberOfInitialKeys.should.be.bignumber.equal(2);\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys(accounts[3], {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "0dd900a0-5174-496b-af2b-6d8218e5031d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow to initialize more than maxNumberOfInitialKeys",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys should not allow to initialize more than maxNumberOfInitialKeys",
                "timedOut": false,
                "duration": 450,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let maxNumberOfInitialKeys = await keysManager.maxNumberOfInitialKeys();\nmaxNumberOfInitialKeys.should.be.bignumber.equal(12);\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000001', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000002', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000003', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000004', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000005', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000006', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000007', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000008', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000009', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000010', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000011', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000012', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000013', {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "dd724ca6-9d2b-4fdb-82a1-878b05843544",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment initialKeyCount by 1",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys should increment initialKeyCount by 1",
                "timedOut": false,
                "duration": 73,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let initialKeysCount = await keysManager.initialKeysCount();\ninitialKeysCount.should.be.bignumber.equal(0);\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\ninitialKeysCount = await keysManager.initialKeysCount();\ninitialKeysCount.should.be.bignumber.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "da79fff1-b7b1-4373-9e83-8f9fbff722de",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set initialKeys hash to activated status",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys should set initialKeys hash to activated status",
                "timedOut": false,
                "duration": 75,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new web3.BigNumber(0).should.be.bignumber.equal(await keysManager.initialKeys(accounts[1]));\nconst {logs} = await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nnew web3.BigNumber(1).should.be.bignumber.equal(await keysManager.initialKeys(accounts[1]));\nlet initialKeysCount = await keysManager.initialKeysCount();\n// event InitialKeyCreated(address indexed initialKey, uint256 time, uint256 initialKeysCount);\nlogs[0].event.should.equal(\"InitialKeyCreated\");\nlogs[0].args.initialKey.should.be.equal(accounts[1]);\ninitialKeysCount.should.be.bignumber.equal(logs[0].args.initialKeysCount);",
                "err": {},
                "isRoot": false,
                "uuid": "a6a1ca0c-613c-4dc5-951e-146adfaa9a37",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "645d1fa0-eda5-4b1f-8312-19d0a7241039",
              "72722ea6-6f4e-4eea-9875-2cd8d2a08f97",
              "75cc9d72-3aa5-40c2-8508-49f469fd4769",
              "fb2b74ec-6f10-4da1-a8b2-4d22cd7cba88",
              "87831a53-3f31-49d6-8e84-606fa598f6cc",
              "0dd900a0-5174-496b-af2b-6d8218e5031d",
              "dd724ca6-9d2b-4fdb-82a1-878b05843544",
              "da79fff1-b7b1-4373-9e83-8f9fbff722de",
              "a6a1ca0c-613c-4dc5-951e-146adfaa9a37"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1055,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "b84eb019-39b0-4019-b482-afcec72764b0",
            "title": "#createKeys",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should only be called from initialized key",
                "fullTitle": "Contract: KeysManager [all features] #createKeys should only be called from initialized key",
                "timedOut": false,
                "duration": 110,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.createKeys(accounts[2], accounts[3], accounts[4], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(accounts[2], accounts[3], accounts[4], {from: accounts[1]}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "6213690c-f948-44c7-b09b-8296fe9598d5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "params should not be equal to each other",
                "fullTitle": "Contract: KeysManager [all features] #createKeys params should not be equal to each other",
                "timedOut": false,
                "duration": 110,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(masterOfCeremony, masterOfCeremony, accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(masterOfCeremony, accounts[2], accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(masterOfCeremony, accounts[2], masterOfCeremony, {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "b17eed1e-e3e5-4b15-b9dd-7a315c96e42c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "any of params should not be equal to initialKey",
                "fullTitle": "Contract: KeysManager [all features] #createKeys any of params should not be equal to initialKey",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(accounts[1], masterOfCeremony, accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(masterOfCeremony, accounts[1], accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(masterOfCeremony, accounts[2], accounts[1], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "10d885da-8736-4aa5-8664-1f2e0434626a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign mining, voting, payout keys to relative mappings",
                "fullTitle": "Contract: KeysManager [all features] #createKeys should assign mining, voting, payout keys to relative mappings",
                "timedOut": false,
                "duration": 144,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nconst {logs} = await keysManager.createKeys(accounts[4], accounts[3], accounts[2], {from: accounts[1]}).should.be.fulfilled;\ntrue.should.be.equal(\n  await keysManager.isMiningActive(accounts[4])\n)\ntrue.should.be.equal(\n  await keysManager.isVotingActive(accounts[3])\n)\ntrue.should.be.equal(\n  await keysManager.isPayoutActive(accounts[4])\n)\n// event ValidatorInitialized(address indexed miningKey, address indexed votingKey, address indexed payoutKey);\nlogs[0].event.should.be.equal('ValidatorInitialized');\nlogs[0].args.miningKey.should.be.equal(accounts[4]);\nlogs[0].args.votingKey.should.be.equal(accounts[3]);\nlogs[0].args.payoutKey.should.be.equal(accounts[2]);",
                "err": {},
                "isRoot": false,
                "uuid": "a58267f1-b52c-477d-a0bd-697c9549129c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assigns voting <-> mining key relationship",
                "fullTitle": "Contract: KeysManager [all features] #createKeys should assigns voting <-> mining key relationship",
                "timedOut": false,
                "duration": 137,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(accounts[4], accounts[3], accounts[2], {from: accounts[1]});\nconst miningKey = await keysManager.getMiningKeyByVoting(accounts[3]);\nminingKey.should.be.equal(accounts[4]);",
                "err": {},
                "isRoot": false,
                "uuid": "ecd810d5-4488-4f9c-856c-36b454cf0aa0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "adds validator to poaConsensus contract",
                "fullTitle": "Contract: KeysManager [all features] #createKeys adds validator to poaConsensus contract",
                "timedOut": false,
                "duration": 111,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[4];\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(miningKey, accounts[3], accounts[2], {from: accounts[1]});\nconst index = await poaNetworkConsensusMock.currentValidatorsLength();\n(await poaNetworkConsensusMock.pendingList(index)).should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "73ce0234-0a4b-4421-afb8-1f0e726e29e3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set validatorKeys hash",
                "fullTitle": "Contract: KeysManager [all features] #createKeys should set validatorKeys hash",
                "timedOut": false,
                "duration": 103,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[4];\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(miningKey, accounts[3], accounts[2], {from: accounts[1]});\nconst validatorKey = await keysManager.validatorKeys(miningKey);\nvalidatorKey.should.be.deep.equal([\n  accounts[3],\n  accounts[2],\n  true,\n  true,\n  true\n])",
                "err": {},
                "isRoot": false,
                "uuid": "a7098284-0e28-46bd-8cbb-866f660d2ccf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set validatorKeys hash",
                "fullTitle": "Contract: KeysManager [all features] #createKeys should set validatorKeys hash",
                "timedOut": false,
                "duration": 138,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[4];\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(miningKey, accounts[3], accounts[2], {from: accounts[1]});\nnew web3.BigNumber(2).should.be.bignumber.equal(await keysManager.initialKeys(accounts[1]));",
                "err": {},
                "isRoot": false,
                "uuid": "86f3d7fb-7d2d-4a29-a87e-da82e2b94516",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6213690c-f948-44c7-b09b-8296fe9598d5",
              "b17eed1e-e3e5-4b15-b9dd-7a315c96e42c",
              "10d885da-8736-4aa5-8664-1f2e0434626a",
              "a58267f1-b52c-477d-a0bd-697c9549129c",
              "ecd810d5-4488-4f9c-856c-36b454cf0aa0",
              "73ce0234-0a4b-4421-afb8-1f0e726e29e3",
              "a7098284-0e28-46bd-8cbb-866f660d2ccf",
              "86f3d7fb-7d2d-4a29-a87e-da82e2b94516"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 944,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "5bf0474b-ce05-435b-b947-3986fef5f51a",
            "title": "#addMiningKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should only be called from votingToChangeKeys",
                "fullTitle": "Contract: KeysManager [all features] #addMiningKey should only be called from votingToChangeKeys",
                "timedOut": false,
                "duration": 95,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.addMiningKey(accounts[1],{from: accounts[5]}).should.be.rejectedWith(ERROR_MSG);\nawait proxyStorageMock.setVotingContractMock(accounts[2]);\nawait keysManager.addMiningKey(accounts[1], {from: accounts[2]}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "331338b0-ed2d-4c79-8065-99b53bb307f3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let add more than maxLimit",
                "fullTitle": "Contract: KeysManager [all features] #addMiningKey should not let add more than maxLimit",
                "timedOut": false,
                "duration": 52,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensusMock.setCurrentValidatorsLength(2001);\nawait keysManager.addMiningKey(accounts[2]).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "25cc4937-320e-4c8a-8d0b-cb723673fff1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set validatorKeys hash",
                "fullTitle": "Contract: KeysManager [all features] #addMiningKey should set validatorKeys hash",
                "timedOut": false,
                "duration": 67,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await keysManager.addMiningKey(accounts[2]).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys(accounts[2]);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false]\n)\nlogs[0].event.should.be.equal('MiningKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.action.should.be.equal('added');",
                "err": {},
                "isRoot": false,
                "uuid": "0075939d-264d-4338-9a5b-e183b0c38c4c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "331338b0-ed2d-4c79-8065-99b53bb307f3",
              "25cc4937-320e-4c8a-8d0b-cb723673fff1",
              "0075939d-264d-4338-9a5b-e183b0c38c4c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 214,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "53a40abc-97bd-446f-9efa-d3fc37bf064b",
            "title": "#addVotingKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should add VotingKey",
                "fullTitle": "Contract: KeysManager [all features] #addVotingKey should add VotingKey",
                "timedOut": false,
                "duration": 182,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.addVotingKey(accounts[2],accounts[1], {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nconst {logs} = await keysManager.addVotingKey(accounts[2], accounts[1]).should.be.fulfilled;\ntrue.should.be.equal(await keysManager.isVotingActive(accounts[2]));\nlogs[0].event.should.be.equal('VotingKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.miningKey.should.be.equal(accounts[1]);\nlogs[0].args.action.should.be.equal('added');\nconst miningKey = await keysManager.getMiningKeyByVoting(accounts[2]);\nminingKey.should.be.equal(accounts[1]);",
                "err": {},
                "isRoot": false,
                "uuid": "ec332563-52b5-447a-a545-eeaa346a1350",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should only be called if mining is active",
                "fullTitle": "Contract: KeysManager [all features] #addVotingKey should only be called if mining is active",
                "timedOut": false,
                "duration": 139,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.removeMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(accounts[2], accounts[1]).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "f600f438-38c1-4481-b9c5-b5dc8133a5b3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "swaps keys if voting already exists",
                "fullTitle": "Contract: KeysManager [all features] #addVotingKey swaps keys if voting already exists",
                "timedOut": false,
                "duration": 168,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(accounts[2], accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(accounts[3], accounts[1]).should.be.fulfilled;\nfalse.should.be.equal(await keysManager.isVotingActive(accounts[2]));\ntrue.should.be.equal(await keysManager.isVotingActive(accounts[3]));\nconst validator = await keysManager.validatorKeys(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ accounts[3],\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "cd565ded-16c1-4bf3-992c-6d93d7ab751c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ec332563-52b5-447a-a545-eeaa346a1350",
              "f600f438-38c1-4481-b9c5-b5dc8133a5b3",
              "cd565ded-16c1-4bf3-992c-6d93d7ab751c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 489,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "fff5c7a6-267b-4bce-a819-13ced6aa3e77",
            "title": "#addPayoutKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should add PayoutKey",
                "fullTitle": "Contract: KeysManager [all features] #addPayoutKey should add PayoutKey",
                "timedOut": false,
                "duration": 123,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.addPayoutKey(accounts[2],accounts[1]).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nconst {logs} = await keysManager.addPayoutKey(accounts[2], accounts[1]).should.be.fulfilled;\nlogs[0].event.should.be.equal('PayoutKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.miningKey.should.be.equal(accounts[1]);\nlogs[0].args.action.should.be.equal('added');",
                "err": {},
                "isRoot": false,
                "uuid": "e464477e-fb95-4f21-8e1d-1b0cf0a4e275",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should only be called if mining is active",
                "fullTitle": "Contract: KeysManager [all features] #addPayoutKey should only be called if mining is active",
                "timedOut": false,
                "duration": 165,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.removeMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addPayoutKey(accounts[2], accounts[1]).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "330006ae-058e-4cab-86ff-8cbe379f84eb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "swaps keys if voting already exists",
                "fullTitle": "Contract: KeysManager [all features] #addPayoutKey swaps keys if voting already exists",
                "timedOut": false,
                "duration": 144,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addPayoutKey(accounts[2], accounts[1]).should.be.fulfilled;\nawait keysManager.addPayoutKey(accounts[3], accounts[1]).should.be.fulfilled;\ntrue.should.be.equal(await keysManager.isPayoutActive(accounts[1]));\nconst validator = await keysManager.validatorKeys(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  accounts[3],\n  true,\n  false,\n  true]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "83c2a812-9bd9-4fbc-8ab8-c65e838bb962",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e464477e-fb95-4f21-8e1d-1b0cf0a4e275",
              "330006ae-058e-4cab-86ff-8cbe379f84eb",
              "83c2a812-9bd9-4fbc-8ab8-c65e838bb962"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 432,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "ce057761-57ec-4df5-93ec-46f079b20ac5",
            "title": "#removeMiningKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should remove miningKey",
                "fullTitle": "Contract: KeysManager [all features] #removeMiningKey should remove miningKey",
                "timedOut": false,
                "duration": 212,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.removeMiningKey(accounts[1], {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(accounts[3], accounts[1]).should.be.fulfilled;\nconst {logs} = await keysManager.removeMiningKey(accounts[1]).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false ]\n)\nlogs[0].event.should.be.equal('MiningKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[1]);\nlogs[0].args.action.should.be.equal('removed');\nconst miningKey = await keysManager.getMiningKeyByVoting(validator[0]);\nminingKey.should.be.equal('0x0000000000000000000000000000000000000000');",
                "err": {},
                "isRoot": false,
                "uuid": "92efeb9f-df21-47c8-a567-a966e988a865",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "removes validator from poaConsensus",
                "fullTitle": "Contract: KeysManager [all features] #removeMiningKey removes validator from poaConsensus",
                "timedOut": false,
                "duration": 318,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait keysManager.removeMiningKey(accounts[1]).should.be.fulfilled;\nlet currentValidatorsLength = await poaNetworkConsensusMock.currentValidatorsLength();\nlet pendingList = [];\nfor(let i = 0; i < currentValidatorsLength.sub(1).toNumber(); i++){\n    let pending = await poaNetworkConsensusMock.pendingList(i);\n    pendingList.push(pending);\n}\npendingList.should.not.contain(accounts[1]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators();\nvalidators.should.not.contain(accounts[1]);\nconst expected = currentValidatorsLength.sub(1);\nconst actual = await poaNetworkConsensusMock.currentValidatorsLength();\nexpected.should.be.bignumber.equal(actual);",
                "err": {},
                "isRoot": false,
                "uuid": "8a1f683e-c04c-4cdd-a32e-b1214c1f0213",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should still enforce removal of votingKey to 0x0 even if voting key didnot exist",
                "fullTitle": "Contract: KeysManager [all features] #removeMiningKey should still enforce removal of votingKey to 0x0 even if voting key didnot exist",
                "timedOut": false,
                "duration": 174,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.removeMiningKey(accounts[1]).should.be.rejectedWith(ERROR_MSG);\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nconst {logs} = await keysManager.removeMiningKey(accounts[1]).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys(accounts[1]);\nconst miningKey = await keysManager.getMiningKeyByVoting(validator[0]);\nminingKey.should.be.equal('0x0000000000000000000000000000000000000000');",
                "err": {},
                "isRoot": false,
                "uuid": "bb21a8e6-d177-41f1-8839-452af4353c26",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "92efeb9f-df21-47c8-a567-a966e988a865",
              "8a1f683e-c04c-4cdd-a32e-b1214c1f0213",
              "bb21a8e6-d177-41f1-8839-452af4353c26"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 704,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "78976d6d-1d05-48d2-ab21-abd350999cfe",
            "title": "#removeVotingKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should remove votingKey",
                "fullTitle": "Contract: KeysManager [all features] #removeVotingKey should remove votingKey",
                "timedOut": false,
                "duration": 215,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {mining, voting, payout} = {mining: accounts[1], voting: accounts[3], payout: accounts[2]};\nawait keysManager.removeVotingKey(mining, {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.addMiningKey(mining).should.be.fulfilled;\nawait keysManager.addVotingKey(voting, mining).should.be.fulfilled;\nawait keysManager.addPayoutKey(payout, mining).should.be.fulfilled;\nconst {logs} = await keysManager.removeVotingKey(mining).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys(mining);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  payout,\n  true,\n  false,\n  true]\n)\nlogs[0].event.should.be.equal('VotingKeyChanged');\nlogs[0].args.key.should.be.equal(voting);\nlogs[0].args.action.should.be.equal('removed');\nconst miningKey = await keysManager.getMiningKeyByVoting(accounts[1]);\nminingKey.should.be.equal('0x0000000000000000000000000000000000000000');",
                "err": {},
                "isRoot": false,
                "uuid": "5c82788e-2939-4793-a707-e4d0fc20562f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5c82788e-2939-4793-a707-e4d0fc20562f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 215,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "440ba1ae-294e-4774-95f1-9eded5b2f62e",
            "title": "#removePayoutKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should remove payoutKey",
                "fullTitle": "Contract: KeysManager [all features] #removePayoutKey should remove payoutKey",
                "timedOut": false,
                "duration": 187,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.removePayoutKey(accounts[1], {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addPayoutKey(accounts[2], accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(accounts[3], accounts[1]).should.be.fulfilled;\nconst {logs} = await keysManager.removePayoutKey(accounts[1]).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ accounts[3],\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false]\n)\nlogs[0].event.should.be.equal('PayoutKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.action.should.be.equal('removed');",
                "err": {},
                "isRoot": false,
                "uuid": "041c6bf7-257c-4595-af10-e0278eed09d1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "041c6bf7-257c-4595-af10-e0278eed09d1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 187,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "b9a0a17e-b1f7-4fa7-b2d1-e408d0c91586",
            "title": "#swapMiningKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should swap mining key",
                "fullTitle": "Contract: KeysManager [all features] #swapMiningKey should swap mining key",
                "timedOut": false,
                "duration": 212,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.swapMiningKey(accounts[1], accounts[2], {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.swapMiningKey(accounts[2], accounts[1]).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false ]\n)\nconst validatorNew = await keysManager.validatorKeys(accounts[2]);\nvalidatorNew.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "7db4957a-3b0a-4703-80b4-c2127d21e5ea",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should keep voting and payout keys",
                "fullTitle": "Contract: KeysManager [all features] #swapMiningKey should keep voting and payout keys",
                "timedOut": false,
                "duration": 350,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const oldMining = accounts[1];\nconst voting = accounts[2];\nconst payout = accounts[3];\nconst newMining = accounts[4];\nawait keysManager.addMiningKey(oldMining).should.be.fulfilled;\nawait keysManager.addVotingKey(voting, oldMining).should.be.fulfilled;\nawait keysManager.addPayoutKey(payout, oldMining).should.be.fulfilled;\nconst {logs} = await keysManager.swapMiningKey(newMining, oldMining).should.be.fulfilled;\nconst mining = await keysManager.getMiningKeyByVoting(voting);\nconst validator = await keysManager.validatorKeys(oldMining);\nconst miningCheck = await keysManager.getMiningKeyByVoting(voting);\nminingCheck.should.be.equal(newMining);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false ]\n)\nconst validatorNew = await keysManager.validatorKeys(newMining);\nvalidatorNew.should.be.deep.equal(\n  [ voting,\n  payout,\n  true,\n  true,\n  true]\n)\noldMining.should.be.equal(await keysManager.getMiningKeyHistory(newMining));\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators();\nvalidators.should.not.contain(oldMining);\nvalidators.should.contain(newMining);",
                "err": {},
                "isRoot": false,
                "uuid": "44d959ee-4e05-4d86-8fe9-82cbff421385",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7db4957a-3b0a-4703-80b4-c2127d21e5ea",
              "44d959ee-4e05-4d86-8fe9-82cbff421385"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 562,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "df72ec27-9500-462c-a514-8358579d360e",
            "title": "#swapVotingKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should swap voting key",
                "fullTitle": "Contract: KeysManager [all features] #swapVotingKey should swap voting key",
                "timedOut": false,
                "duration": 185,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.swapVotingKey(accounts[1], accounts[2], {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(accounts[2], accounts[1]).should.be.fulfilled;\nawait keysManager.swapVotingKey(accounts[3], accounts[1]).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ accounts[3],\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "ba4a3a6d-f8af-44b3-94a4-b51e74a8c8b8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ba4a3a6d-f8af-44b3-94a4-b51e74a8c8b8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 185,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "f3a6201f-73e6-4033-a4d4-7b1de593133d",
            "title": "#swapPayoutKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should swap payout key",
                "fullTitle": "Contract: KeysManager [all features] #swapPayoutKey should swap payout key",
                "timedOut": false,
                "duration": 178,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.swapPayoutKey(accounts[1], accounts[2], {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addPayoutKey(accounts[2], accounts[1]).should.be.fulfilled;\nawait keysManager.swapPayoutKey(accounts[3], accounts[1]).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  accounts[3],\n  true,\n  false,\n  true]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "6da96d75-00d3-465d-a8e2-21aa0ee02f8c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6da96d75-00d3-465d-a8e2-21aa0ee02f8c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 178,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "2449d4ed-70f6-42b7-a857-26088517db56",
            "title": "#migrateInitialKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "can copy initial keys",
                "fullTitle": "Contract: KeysManager [all features] #migrateInitialKey can copy initial keys",
                "timedOut": false,
                "duration": 199,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1]);\nlet newKeysManager = await KeysManagerMock.new(proxyStorageMock.address, poaNetworkConsensusMock.address, masterOfCeremony, keysManager.address);\nkeysManager.address.should.be.equal(\n  await newKeysManager.previousKeysManager()\n)\nlet initialKeys = await newKeysManager.initialKeysCount();\ninitialKeys.should.be.bignumber.equal(1);\nlet {logs} = await newKeysManager.migrateInitialKey(accounts[1]);\nlogs[0].event.should.equal(\"Migrated\");\nlogs[0].args.key.should.be.equal(accounts[1]);\nlogs[0].args.name.should.be.equal(\"initialKey\");\nnew web3.BigNumber(1).should.be.bignumber.equal(\n  await newKeysManager.initialKeys(accounts[1])\n)\nawait newKeysManager.migrateInitialKey(accounts[2]).should.be.rejectedWith(ERROR_MSG);\nnew web3.BigNumber(0).should.be.bignumber.equal(\n  await newKeysManager.initialKeys(accounts[2])\n)",
                "err": {},
                "isRoot": false,
                "uuid": "2124fdf4-bd5a-4731-9cc7-138181d1b449",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "copies validator keys",
                "fullTitle": "Contract: KeysManager [all features] #migrateInitialKey copies validator keys",
                "timedOut": false,
                "duration": 592,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// let masterOfCeremony = accounts[0];\nlet miningKey = accounts[2];\nlet votingKey = accounts[3];\nlet payoutKey = accounts[4];\nlet mining2 = accounts[5];\nawait proxyStorageMock.setVotingContractMock(accounts[2]);\nawait keysManager.addMiningKey(mining2, {from: accounts[2]}).should.be.fulfilled;\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(miningKey, votingKey, payoutKey, {from: accounts[1]}).should.be.fulfilled;\nconst validatorKeyFromOld = await keysManager.validatorKeys(miningKey);\nvalidatorKeyFromOld.should.be.deep.equal([\n  votingKey,\n  payoutKey,\n  true,\n  true,\n  true\n])\nlet newKeysManager = await KeysManagerMock.new(proxyStorageMock.address, poaNetworkConsensusMock.address, masterOfCeremony, keysManager.address);\n// mining #1\nlet {logs} = await newKeysManager.migrateMiningKey(miningKey);\nlogs[0].event.should.equal(\"Migrated\");\nlogs[0].args.key.should.be.equal(miningKey);\nlogs[0].args.name.should.be.equal(\"miningKey\");\nlet initialKeys = await newKeysManager.initialKeysCount();\ninitialKeys.should.be.bignumber.equal(1);\nconst validatorKey = await newKeysManager.validatorKeys(miningKey);\nvalidatorKey.should.be.deep.equal([\n  votingKey,\n  payoutKey,\n  true,\n  true,\n  true\n])\ntrue.should.be.equal(\n  await newKeysManager.successfulValidatorClone(miningKey)\n)\nminingKey.should.be.equal(\n  await newKeysManager.getMiningKeyByVoting(votingKey)\n);\ntrue.should.be.equal(\n  await newKeysManager.isMiningActive(miningKey)\n)\ntrue.should.be.equal(\n  await newKeysManager.isVotingActive(votingKey)\n)\ntrue.should.be.equal(\n  await newKeysManager.isPayoutActive(miningKey)\n)\n// mining#2\nawait newKeysManager.migrateMiningKey(mining2);\nconst validatorKey2 = await newKeysManager.validatorKeys(mining2);\nvalidatorKey2.should.be.deep.equal([\n  \"0x0000000000000000000000000000000000000000\",\n  \"0x0000000000000000000000000000000000000000\",\n  true,\n  false,\n  false\n])\ntrue.should.be.equal(\n  await newKeysManager.isMiningActive(mining2)\n)\ntrue.should.be.equal(\n  await newKeysManager.successfulValidatorClone(mining2)\n)",
                "err": {},
                "isRoot": false,
                "uuid": "ddf786bb-4e9a-45a9-bfaf-446a38ce3a7b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "throws when trying to copy invalid mining key",
                "fullTitle": "Contract: KeysManager [all features] #migrateInitialKey throws when trying to copy invalid mining key",
                "timedOut": false,
                "duration": 96,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newKeysManager = await KeysManagerMock.new(proxyStorageMock.address, poaNetworkConsensusMock.address, masterOfCeremony, keysManager.address);\ntrue.should.be.equal(\n  await newKeysManager.successfulValidatorClone(masterOfCeremony)\n);\nawait newKeysManager.migrateMiningKey(masterOfCeremony).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "31ce1622-d75a-494d-948f-c72e0ef81886",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2124fdf4-bd5a-4731-9cc7-138181d1b449",
              "ddf786bb-4e9a-45a9-bfaf-446a38ce3a7b",
              "31ce1622-d75a-494d-948f-c72e0ef81886"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 887,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "2ef03e8c-caf7-4c43-9d9c-ed03228b2617",
        "title": "Contract: ValidatorMetadata [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
        "file": "/test/metadata_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: ValidatorMetadata [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 994,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "b5343612-e0cd-43e7-8875-f37f02582a9e",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: ValidatorMetadata [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "79d3f9b9-9215-44e0-8762-10af9c0ff417",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: ValidatorMetadata [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 689,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "poaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony, []);\n   proxyStorageMock = await ProxyStorageMock.new(poaNetworkConsensusMock.address);\n   keysManager = await KeysManagerMock.new(proxyStorageMock.address, poaNetworkConsensusMock.address, masterOfCeremony, \"0x0000000000000000000000000000000000000000\");\n   ballotsStorage = await BallotsStorage.new(proxyStorageMock.address);\n   await poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\n   metadata = await ValidatorMetadata.new();\n   metadataEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, metadata.address);\n   \n   await proxyStorageMock.initializeAddresses(\n     keysManager.address,\n     masterOfCeremony,\n     masterOfCeremony,\n     masterOfCeremony,\n     ballotsStorage.address,\n     metadataEternalStorage.address\n   );\n   \n   metadata = await ValidatorMetadata.at(metadataEternalStorage.address);\n   \n   await keysManager.addMiningKey(miningKey).should.be.fulfilled;\n   await keysManager.addVotingKey(votingKey, miningKey).should.be.fulfilled;\n   await keysManager.addMiningKey(miningKey2).should.be.fulfilled;\n   await keysManager.addVotingKey(votingKey2, miningKey2).should.be.fulfilled;\n   await keysManager.addMiningKey(miningKey3).should.be.fulfilled;\n   await keysManager.addVotingKey(votingKey3, miningKey3).should.be.fulfilled;\n   await metadata.setTime(55555);",
            "err": {},
            "isRoot": false,
            "uuid": "50e3948a-a63e-4bd9-aa81-dc0fae304593",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: ValidatorMetadata [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "669aded0-892f-4288-a133-f0b6bd9381a8",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "73293c3a-149f-4acf-bb26-96f390c238dd",
            "title": "#createMetadata",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata [all features] #createMetadata happy path",
                "timedOut": false,
                "duration": 120,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nconst validators = await metadata.validators(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2)\n]);\nlogs[0].event.should.be.equal('MetadataCreated');\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "ddd1308b-d545-4b45-b92f-8397cc650669",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create metadata if called by non-voting key",
                "fullTitle": "Contract: ValidatorMetadata [all features] #createMetadata should not let create metadata if called by non-voting key",
                "timedOut": false,
                "duration": 63,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await metadata.createMetadata(...fakeData, {from: miningKey}).should.be.rejectedWith(ERROR_MSG);\nconst validators = await metadata.validators(miningKey);\nvalidators.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  \"\",\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0)\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "fbaa192a-b848-461d-944c-feaafd7ee74b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create metadata if called second time",
                "fullTitle": "Contract: ValidatorMetadata [all features] #createMetadata should not let create metadata if called second time",
                "timedOut": false,
                "duration": 113,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "8c3c7614-4639-45c3-83ec-ce2a739b339e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ddd1308b-d545-4b45-b92f-8397cc650669",
              "fbaa192a-b848-461d-944c-feaafd7ee74b",
              "8c3c7614-4639-45c3-83ec-ce2a739b339e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 296,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "68beaeb2-913a-47fa-8bd3-5e64cc79d208",
            "title": "#getMiningByVotingKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata [all features] #getMiningByVotingKey happy path",
                "timedOut": false,
                "duration": 87,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let actual = await metadata.getMiningByVotingKey(votingKey);\nminingKey.should.be.equal(actual);\nactual = await metadata.getMiningByVotingKey(accounts[4]);\n'0x0000000000000000000000000000000000000000'.should.be.equal(actual);",
                "err": {},
                "isRoot": false,
                "uuid": "05a5287f-8a39-4a49-9f27-dd19162fc10c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "05a5287f-8a39-4a49-9f27-dd19162fc10c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 87,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "2e851a9d-0718-4d63-986f-01cb1196f495",
            "title": "#changeRequest",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: ValidatorMetadata [all features] #changeRequest \"before each\" hook",
                "timedOut": false,
                "duration": 71,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "af8a7511-2bbb-4330-812a-d3296e9e2960",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata [all features] #changeRequest happy path",
                "timedOut": false,
                "duration": 139,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.setTime(4444);\nconst {logs} = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nconst pendingChanges = await metadata.pendingChanges(miningKey);\npendingChanges.should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2)\n]);\nlogs[0].event.should.be.equal(\"ChangeRequestInitiated\");\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "f6126d99-6a7e-4ba4-84c5-99687dc869dc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let call if there is no metadata",
                "fullTitle": "Contract: ValidatorMetadata [all features] #changeRequest should not let call if there is no metadata",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.changeRequest(...newMetadata, {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "a92a1c79-be15-4cf4-a08a-258ab3012100",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "resets confirmations when changeRequest recreated",
                "fullTitle": "Contract: ValidatorMetadata [all features] #changeRequest resets confirmations when changeRequest recreated",
                "timedOut": false,
                "duration": 402,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.setTime(4444);\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2});\nawait metadata.confirmPendingChange(miningKey, {from: votingKey3});\nlet confirmations = await metadata.confirmations(miningKey);\nconfirmations[0].should.be.bignumber.equal(2);\nconst {logs} = await metadata.changeRequest(...anotherData, {from: votingKey}).should.be.fulfilled;\nconfirmations = await metadata.confirmations(miningKey);\nconfirmations[0].should.be.bignumber.equal(0);\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2});\nconfirmations = await metadata.confirmations(miningKey);\nconfirmations[0].should.be.bignumber.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "ea35414d-882b-4bbb-96d9-a7d3a78732e7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f6126d99-6a7e-4ba4-84c5-99687dc869dc",
              "a92a1c79-be15-4cf4-a08a-258ab3012100",
              "ea35414d-882b-4bbb-96d9-a7d3a78732e7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 572,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "bf7a5612-8537-4805-a018-3e88b3ceff6e",
            "title": "#cancelPendingChange",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata [all features] #cancelPendingChange happy path",
                "timedOut": false,
                "duration": 369,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.cancelPendingChange({from: votingKey}).should.be.fulfilled;\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.setTime(4444);\nconst {logs} = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.cancelPendingChange({from: votingKey}).should.be.fulfilled;\nconst pendingChanges = await metadata.pendingChanges(miningKey);\npendingChanges.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  \"\",\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0)\n]);\nconst validators = await metadata.validators(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2)\n]);\nlogs[0].event.should.be.equal(\"ChangeRequestInitiated\");\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "baad0147-33d1-4e06-a753-917a037e0e68",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let delete records for someone else miningKey",
                "fullTitle": "Contract: ValidatorMetadata [all features] #cancelPendingChange should not let delete records for someone else miningKey",
                "timedOut": false,
                "duration": 373,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.cancelPendingChange({from: votingKey}).should.be.fulfilled;\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.setTime(4444);\nconst {logs} = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.cancelPendingChange({from: votingKey2}).should.be.fulfilled;\nconst pendingChanges = await metadata.pendingChanges(miningKey);\npendingChanges.should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2)\n]);\nconst validators = await metadata.validators(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2)\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "c7f171ca-fc6e-4045-8086-8a47af66ed92",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "baad0147-33d1-4e06-a753-917a037e0e68",
              "c7f171ca-fc6e-4045-8086-8a47af66ed92"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 742,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "3343d8fc-7d6c-42c8-814b-b7ddf165a8a6",
            "title": "#confirmPendingChange",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should not let confirm your own changes",
                "fullTitle": "Contract: ValidatorMetadata [all features] #confirmPendingChange should not let confirm your own changes",
                "timedOut": false,
                "duration": 194,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "d2cf0a67-f305-467f-a701-7ff3c31ea4d2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should confirm changes",
                "fullTitle": "Contract: ValidatorMetadata [all features] #confirmPendingChange should confirm changes",
                "timedOut": false,
                "duration": 236,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nconst {logs} = await metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.fulfilled;\nconst confirmations = await metadata.confirmations(miningKey);\nconfirmations[0].should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Confirmed');\nlogs[0].args.miningKey.should.be.equal(miningKey);\nlogs[0].args.votingSender.should.be.equal(votingKey2);",
                "err": {},
                "isRoot": false,
                "uuid": "87596bee-68c0-4c82-b145-f998e4838ca6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevent from double voting",
                "fullTitle": "Contract: ValidatorMetadata [all features] #confirmPendingChange prevent from double voting",
                "timedOut": false,
                "duration": 261,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nconst {logs} = await metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nconst confirmations = await metadata.confirmations(miningKey);\nconfirmations[0].should.be.bignumber.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "574245da-4de8-4097-8f49-ef193d817b29",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d2cf0a67-f305-467f-a701-7ff3c31ea4d2",
              "87596bee-68c0-4c82-b145-f998e4838ca6",
              "574245da-4de8-4097-8f49-ef193d817b29"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 691,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "f29bf274-f9dd-4a5b-b8c1-a4699fc1bbe6",
            "title": "#finalize",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata [all features] #finalize happy path",
                "timedOut": false,
                "duration": 512,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.setTime(4444);\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2});\nawait metadata.confirmPendingChange(miningKey, {from: votingKey3});\nconst {logs} = await metadata.finalize(miningKey, {from: votingKey});\nconst validators = await metadata.validators(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2)\n]);\nconst pendingChanges = await metadata.pendingChanges(miningKey);\npendingChanges.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  \"\",\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0)\n]);\nlogs[0].event.should.be.equal('FinalizedChange');\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "87ef73bf-ed3b-4109-9dbf-790e56a9a53b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "87ef73bf-ed3b-4109-9dbf-790e56a9a53b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 512,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "7790553c-1606-4ddc-8f2a-1c587e5d2d47",
            "title": "#getMinThreshold",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns default value",
                "fullTitle": "Contract: ValidatorMetadata [all features] #getMinThreshold returns default value",
                "timedOut": false,
                "duration": 28,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await metadata.getMinThreshold()).should.be.bignumber.equal(2);",
                "err": {},
                "isRoot": false,
                "uuid": "c2d312b4-c565-4c58-acfa-ae3a0b542736",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c2d312b4-c565-4c58-acfa-ae3a0b542736"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 28,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "67c13069-1997-49f9-9ccc-aecae9a4a395",
            "title": "#setProxyAddress",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "can request a new proxy address",
                "fullTitle": "Contract: ValidatorMetadata [all features] #setProxyAddress can request a new proxy address",
                "timedOut": false,
                "duration": 330,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "\"0x0000000000000000000000000000000000000000\".should.be.equal\n  (await metadata.pendingProxyStorage());\n(await metadata.proxyStorage()).should.be.equal(proxyStorageMock.address);\nconst {logs} = await metadata.setProxyAddress(newProxy, {from: votingKey}).should.be.fulfilled;\n(await metadata.pendingProxyStorage()).should.be.equal(newProxy);\n(await metadata.pendingProxyConfirmations(newProxy))[0].should.be.bignumber.deep.equal(1);\nlogs[0].event.should.be.equal(\"RequestForNewProxy\");\nlogs[0].args.newProxyAddress.should.be.equal(newProxy);\nawait metadata.confirmNewProxyAddress(newProxy, {from :votingKey2}).should.be.fulfilled;\n(await metadata.pendingProxyConfirmations(newProxy))[0].should.be.bignumber.deep.equal(2);\nlet final = await metadata.confirmNewProxyAddress(newProxy, {from: votingKey3}).should.be.fulfilled;\nfinal.logs[0].event.should.be.equal(\"ChangeProxyStorage\");\nfinal.logs[0].args.newProxyAddress.should.be.equal(newProxy);\n\"0x0000000000000000000000000000000000000000\".should.be.equal\n  (await metadata.pendingProxyStorage());\n(await metadata.proxyStorage()).should.be.equal(newProxy);",
                "err": {},
                "isRoot": false,
                "uuid": "96e3c1b7-8d58-4787-9fe2-89f0f25d4252",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "96e3c1b7-8d58-4787-9fe2-89f0f25d4252"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 330,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "d82d79dd-7c46-4d6c-8b91-fe298ea95e8e",
            "title": "#upgradeTo",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: ValidatorMetadata [all features] #upgradeTo \"before each\" hook",
                "timedOut": false,
                "duration": 81,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "metadata = await ValidatorMetadata.new();\nmetadataEternalStorage = await EternalStorageProxy.new(proxyStorageStubAddress, metadata.address);\nmetadata = await ValidatorMetadata.at(metadataEternalStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "62708aa7-1942-4892-a0dc-6643fd86e873",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "may be called only by ProxyStorage",
                "fullTitle": "Contract: ValidatorMetadata [all features] #upgradeTo may be called only by ProxyStorage",
                "timedOut": false,
                "duration": 84,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let metadataNew = await ValidatorMetadataNew.new();\nawait metadataEternalStorage.upgradeTo(metadataNew.address, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);\nawait metadataEternalStorage.upgradeTo(metadataNew.address, {from: proxyStorageStubAddress}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "ad0df0c7-e691-47a8-bfb8-a2641b018868",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change implementation address",
                "fullTitle": "Contract: ValidatorMetadata [all features] #upgradeTo should change implementation address",
                "timedOut": false,
                "duration": 132,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let metadataNew = await ValidatorMetadataNew.new();\nlet oldImplementation = await metadata.implementation();\nlet newImplementation = metadataNew.address;\n(await metadataEternalStorage.implementation()).should.be.equal(oldImplementation);\nawait metadataEternalStorage.upgradeTo(newImplementation, {from: proxyStorageStubAddress});\nmetadataNew = await ValidatorMetadataNew.at(metadataEternalStorage.address);\n(await metadataNew.implementation()).should.be.equal(newImplementation);\n(await metadataEternalStorage.implementation()).should.be.equal(newImplementation);",
                "err": {},
                "isRoot": false,
                "uuid": "e8d16131-32da-43fd-b08f-45bc23701551",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment implementation version",
                "fullTitle": "Contract: ValidatorMetadata [all features] #upgradeTo should increment implementation version",
                "timedOut": false,
                "duration": 128,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let metadataNew = await ValidatorMetadataNew.new();\nlet oldVersion = await metadata.version();\nlet newVersion = oldVersion.add(1);\n(await metadataEternalStorage.version()).should.be.bignumber.equal(oldVersion);\nawait metadataEternalStorage.upgradeTo(metadataNew.address, {from: proxyStorageStubAddress});\nmetadataNew = await ValidatorMetadataNew.at(metadataEternalStorage.address);\n(await metadataNew.version()).should.be.bignumber.equal(newVersion);\n(await metadataEternalStorage.version()).should.be.bignumber.equal(newVersion);",
                "err": {},
                "isRoot": false,
                "uuid": "8b084e96-d309-4d4c-b3b8-d941809a3277",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should work",
                "fullTitle": "Contract: ValidatorMetadata [all features] #upgradeTo new implementation should work",
                "timedOut": false,
                "duration": 128,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let metadataNew = await ValidatorMetadataNew.new();\nawait metadataEternalStorage.upgradeTo(metadataNew.address, {from: proxyStorageStubAddress});\nmetadataNew = await ValidatorMetadataNew.at(metadataEternalStorage.address);\n(await metadataNew.initialized()).should.be.equal(false);\nawait metadataNew.initialize();\n(await metadataNew.initialized()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "88daab4d-6541-4b68-83c2-2f0f174d1668",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same proxyStorage address",
                "fullTitle": "Contract: ValidatorMetadata [all features] #upgradeTo new implementation should use the same proxyStorage address",
                "timedOut": false,
                "duration": 85,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let metadataNew = await ValidatorMetadataNew.new();\nawait metadataEternalStorage.upgradeTo(metadataNew.address, {from: proxyStorageStubAddress});\nmetadataNew = await ValidatorMetadataNew.at(metadataEternalStorage.address);\n(await metadataNew.proxyStorage()).should.be.equal(proxyStorageStubAddress);",
                "err": {},
                "isRoot": false,
                "uuid": "b50832c7-f782-4c1f-a31f-ac0c7139e446",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same storage",
                "fullTitle": "Contract: ValidatorMetadata [all features] #upgradeTo new implementation should use the same storage",
                "timedOut": false,
                "duration": 284,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.setTime(55555);\nawait metadataEternalStorage.setProxyStorage(proxyStorageMock.address);\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadataEternalStorage.setProxyStorage(proxyStorageStubAddress);\nlet metadataNew = await ValidatorMetadataNew.new();\nawait metadataEternalStorage.upgradeTo(metadataNew.address, {from: proxyStorageStubAddress});\nmetadataNew = await ValidatorMetadataNew.at(metadataEternalStorage.address);\nconst validators = await metadataNew.validators(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2)\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "c6136e54-c30a-46c5-9e70-f5ef8cd1ac26",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ad0df0c7-e691-47a8-bfb8-a2641b018868",
              "e8d16131-32da-43fd-b08f-45bc23701551",
              "8b084e96-d309-4d4c-b3b8-d941809a3277",
              "88daab4d-6541-4b68-83c2-2f0f174d1668",
              "b50832c7-f782-4c1f-a31f-ac0c7139e446",
              "c6136e54-c30a-46c5-9e70-f5ef8cd1ac26"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 841,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "2055594e-ea28-4484-8d60-f7bf4b31356d",
        "title": "Contract: ValidatorMetadata upgraded [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
        "file": "/test/metadata_upgrade_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: ValidatorMetadata upgraded [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 1116,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "48e45c55-d56b-450e-a724-b0e39ec4995d",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: ValidatorMetadata upgraded [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 4,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "7f07a1cd-eaff-4054-aaea-da7b16b7afee",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: ValidatorMetadata upgraded [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 779,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "poaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony, []);\n   proxyStorageMock = await ProxyStorageMock.new(poaNetworkConsensusMock.address);\n   keysManager = await KeysManagerMock.new(proxyStorageMock.address, poaNetworkConsensusMock.address, masterOfCeremony, \"0x0000000000000000000000000000000000000000\");\n   ballotsStorage = await BallotsStorage.new(proxyStorageMock.address);\n   await poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\n   metadata = await ValidatorMetadata.new();\n   metadataEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, metadata.address);\n   await proxyStorageMock.initializeAddresses(\n     keysManager.address,\n     masterOfCeremony,\n     masterOfCeremony,\n     masterOfCeremony,\n     ballotsStorage.address,\n     metadataEternalStorage.address\n   );\n   //metadata = await ValidatorMetadata.at(metadataEternalStorage.address);\n   let metadataNew = await ValidatorMetadataNew.new();\n   await metadataEternalStorage.setProxyStorage(accounts[6]);\n   await metadataEternalStorage.upgradeTo(metadataNew.address, {from: accounts[6]});\n   await metadataEternalStorage.setProxyStorage(proxyStorageMock.address);\n   metadata = await ValidatorMetadataNew.at(metadataEternalStorage.address);\n   await keysManager.addMiningKey(miningKey).should.be.fulfilled;\n   await keysManager.addVotingKey(votingKey, miningKey).should.be.fulfilled;\n   await keysManager.addMiningKey(miningKey2).should.be.fulfilled;\n   await keysManager.addVotingKey(votingKey2, miningKey2).should.be.fulfilled;\n   await keysManager.addMiningKey(miningKey3).should.be.fulfilled;\n   await keysManager.addVotingKey(votingKey3, miningKey3).should.be.fulfilled;\n   await metadata.setTime(55555);",
            "err": {},
            "isRoot": false,
            "uuid": "3a808d79-ea11-4dd0-87f9-5deb8147d984",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: ValidatorMetadata upgraded [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "4d71536d-d7e2-4258-bbaa-0a7613c3e952",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "071071c7-756d-4414-9055-629c5a8fabd4",
            "title": "#createMetadata",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
            "file": "/test/metadata_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #createMetadata happy path",
                "timedOut": false,
                "duration": 101,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nconst validators = await metadata.validators(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2)\n]);\nlogs[0].event.should.be.equal('MetadataCreated');\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "132d9d77-ff67-466c-9d58-b7000d11b320",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create metadata if called by non-voting key",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #createMetadata should not let create metadata if called by non-voting key",
                "timedOut": false,
                "duration": 67,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await metadata.createMetadata(...fakeData, {from: miningKey}).should.be.rejectedWith(ERROR_MSG);\nconst validators = await metadata.validators(miningKey);\nvalidators.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  \"\",\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0)\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "69a77873-e898-4ab8-af23-0ceb3d31f7c5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create metadata if called second time",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #createMetadata should not let create metadata if called second time",
                "timedOut": false,
                "duration": 109,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "2a856bd0-9f66-49f0-a3ce-8790d96a2048",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "132d9d77-ff67-466c-9d58-b7000d11b320",
              "69a77873-e898-4ab8-af23-0ceb3d31f7c5",
              "2a856bd0-9f66-49f0-a3ce-8790d96a2048"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 277,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "665a78bd-ba59-44dc-a1cc-f681dca09ca9",
            "title": "#getMiningByVotingKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
            "file": "/test/metadata_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #getMiningByVotingKey happy path",
                "timedOut": false,
                "duration": 46,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let actual = await metadata.getMiningByVotingKey(votingKey);\nminingKey.should.be.equal(actual);\nactual = await metadata.getMiningByVotingKey(accounts[4]);\n'0x0000000000000000000000000000000000000000'.should.be.equal(actual);",
                "err": {},
                "isRoot": false,
                "uuid": "7de658a6-f0dc-456c-b337-9a9c4abb9ec4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7de658a6-f0dc-456c-b337-9a9c4abb9ec4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 46,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "5f26aa70-fb44-41db-899b-66d381d04ae4",
            "title": "#changeRequest",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
            "file": "/test/metadata_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #changeRequest \"before each\" hook",
                "timedOut": false,
                "duration": 78,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "3230f96f-b947-4b8d-8181-9369243a1a29",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #changeRequest happy path",
                "timedOut": false,
                "duration": 124,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.setTime(4444);\nconst {logs} = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\npendingChanges = await metadata.pendingChanges(miningKey);\npendingChanges.should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2)\n]);\nlogs[0].event.should.be.equal(\"ChangeRequestInitiated\");\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "cbc4019d-ad6c-47a6-98ed-899191de4abd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let call if there is no metadata",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #changeRequest should not let call if there is no metadata",
                "timedOut": false,
                "duration": 27,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.changeRequest(...newMetadata, {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "335c4311-934e-47d7-af61-5de7e99de897",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "resets confirmations when changeRequest recreated",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #changeRequest resets confirmations when changeRequest recreated",
                "timedOut": false,
                "duration": 412,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.setTime(4444);\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2});\nawait metadata.confirmPendingChange(miningKey, {from: votingKey3});\nlet confirmations = await metadata.confirmations(miningKey);\nconfirmations[0].should.be.bignumber.equal(2);\nconst {logs} = await metadata.changeRequest(...anotherData, {from: votingKey}).should.be.fulfilled;\nconfirmations = await metadata.confirmations(miningKey);\nconfirmations[0].should.be.bignumber.equal(0);\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2});\nconfirmations = await metadata.confirmations(miningKey);\nconfirmations[0].should.be.bignumber.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "f72c7f96-c0ba-4232-9359-fd0da7299e92",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "cbc4019d-ad6c-47a6-98ed-899191de4abd",
              "335c4311-934e-47d7-af61-5de7e99de897",
              "f72c7f96-c0ba-4232-9359-fd0da7299e92"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 563,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "51779276-288c-4fd9-b30d-79d32e586526",
            "title": "#cancelPendingChange",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
            "file": "/test/metadata_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #cancelPendingChange happy path",
                "timedOut": false,
                "duration": 384,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.cancelPendingChange({from: votingKey}).should.be.fulfilled;\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.setTime(4444);\nconst {logs} = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.cancelPendingChange({from: votingKey}).should.be.fulfilled;\nconst pendingChanges = await metadata.pendingChanges(miningKey);\npendingChanges.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  \"\",\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0)\n]);\nconst validators = await metadata.validators(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2)\n]);\nlogs[0].event.should.be.equal(\"ChangeRequestInitiated\");\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "91318b75-d7cd-4c82-b953-43fb0a4ceeef",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let delete records for someone else miningKey",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #cancelPendingChange should not let delete records for someone else miningKey",
                "timedOut": false,
                "duration": 454,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.cancelPendingChange({from: votingKey}).should.be.fulfilled;\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.setTime(4444);\nconst {logs} = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.cancelPendingChange({from: votingKey2}).should.be.fulfilled;\nconst pendingChanges = await metadata.pendingChanges(miningKey);\npendingChanges.should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2)\n]);\nconst validators = await metadata.validators(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2)\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "067a666b-1907-477f-a8b8-f4f1e59490a6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "91318b75-d7cd-4c82-b953-43fb0a4ceeef",
              "067a666b-1907-477f-a8b8-f4f1e59490a6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 838,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "cfd10b32-e9b3-40cb-ac59-73eb7697214a",
            "title": "#confirmPendingChange",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
            "file": "/test/metadata_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should not let confirm your own changes",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #confirmPendingChange should not let confirm your own changes",
                "timedOut": false,
                "duration": 212,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "784e8b78-d68e-4db7-bef2-4323aff2fd11",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should confirm changes",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #confirmPendingChange should confirm changes",
                "timedOut": false,
                "duration": 249,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nconst {logs} = await metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.fulfilled;\nconst confirmations = await metadata.confirmations(miningKey);\nconfirmations[0].should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Confirmed');\nlogs[0].args.miningKey.should.be.equal(miningKey);\nlogs[0].args.votingSender.should.be.equal(votingKey2);",
                "err": {},
                "isRoot": false,
                "uuid": "64aab87d-1fa3-44ba-9e49-941e8ba4ed2e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevent from double voting",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #confirmPendingChange prevent from double voting",
                "timedOut": false,
                "duration": 280,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nconst {logs} = await metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nconst confirmations = await metadata.confirmations(miningKey);\nconfirmations[0].should.be.bignumber.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "a3930b73-7ebc-4c55-aba4-5d22297b2562",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "784e8b78-d68e-4db7-bef2-4323aff2fd11",
              "64aab87d-1fa3-44ba-9e49-941e8ba4ed2e",
              "a3930b73-7ebc-4c55-aba4-5d22297b2562"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 741,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "8ff1897c-4583-4d7c-8656-19a3a9b54860",
            "title": "#finalize",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
            "file": "/test/metadata_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #finalize happy path",
                "timedOut": false,
                "duration": 510,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.setTime(4444);\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2});\nawait metadata.confirmPendingChange(miningKey, {from: votingKey3});\nconst {logs} = await metadata.finalize(miningKey, {from: votingKey});\nconst validators = await metadata.validators(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2)\n]);\nconst pendingChanges = await metadata.pendingChanges(miningKey);\npendingChanges.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  \"\",\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0)\n]);\nlogs[0].event.should.be.equal('FinalizedChange');\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "75ec3d8b-993d-4719-a59e-1614d37468ea",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "75ec3d8b-993d-4719-a59e-1614d37468ea"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 510,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "2a3cc887-d95f-4504-8911-be9e16ec8f80",
            "title": "#getMinThreshold",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
            "file": "/test/metadata_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns default value",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #getMinThreshold returns default value",
                "timedOut": false,
                "duration": 121,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await metadata.getMinThreshold()).should.be.bignumber.equal(2);",
                "err": {},
                "isRoot": false,
                "uuid": "c8c5a64e-7c2b-4af6-89be-75b9e30f69a3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c8c5a64e-7c2b-4af6-89be-75b9e30f69a3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 121,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "6405a872-b3dd-4c24-a4cc-458c06eb1873",
            "title": "#setProxyAddress",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
            "file": "/test/metadata_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "can request a new proxy address",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #setProxyAddress can request a new proxy address",
                "timedOut": false,
                "duration": 282,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "\"0x0000000000000000000000000000000000000000\".should.be.equal\n  (await metadata.pendingProxyStorage());\n(await metadata.proxyStorage()).should.be.equal(proxyStorageMock.address);\nconst {logs} = await metadata.setProxyAddress(newProxy, {from: votingKey}).should.be.fulfilled;\n(await metadata.pendingProxyStorage()).should.be.equal(newProxy);\n(await metadata.pendingProxyConfirmations(newProxy))[0].should.be.bignumber.deep.equal(1);\nlogs[0].event.should.be.equal(\"RequestForNewProxy\");\nlogs[0].args.newProxyAddress.should.be.equal(newProxy);\nawait metadata.confirmNewProxyAddress(newProxy, {from :votingKey2}).should.be.fulfilled;\n(await metadata.pendingProxyConfirmations(newProxy))[0].should.be.bignumber.deep.equal(2);\nlet final = await metadata.confirmNewProxyAddress(newProxy, {from: votingKey3}).should.be.fulfilled;\nfinal.logs[0].event.should.be.equal(\"ChangeProxyStorage\");\nfinal.logs[0].args.newProxyAddress.should.be.equal(newProxy);\n\"0x0000000000000000000000000000000000000000\".should.be.equal\n  (await metadata.pendingProxyStorage());\n(await metadata.proxyStorage()).should.be.equal(newProxy);",
                "err": {},
                "isRoot": false,
                "uuid": "e45ba3ce-5722-4c4a-ab14-6b548024db3e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e45ba3ce-5722-4c4a-ab14-6b548024db3e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 282,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "10d0d9b2-e83f-4ebb-b21c-15500498653f",
        "title": "Contract: PoaNetworkConsensus [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
        "file": "/test/poa_network_consensus_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: PoaNetworkConsensus [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 960,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "af8b3344-0a67-4df3-91f8-c7d522b81109",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: PoaNetworkConsensus [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "69008ea3-b179-4987-8105-f178f1554855",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: PoaNetworkConsensus [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 154,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "poaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony, []);\nproxyStorageMock = await ProxyStorageMock.new(poaNetworkConsensus.address);\nawait poaNetworkConsensus.setProxyStorage(proxyStorageMock.address);\nawait proxyStorageMock.initializeAddresses(\n    masterOfCeremony,\n    masterOfCeremony,\n    masterOfCeremony,\n    masterOfCeremony,\n    masterOfCeremony,\n    masterOfCeremony\n);",
            "err": {},
            "isRoot": false,
            "uuid": "ec0e31f3-4af3-4a8d-9c68-8cd79ebdd9ed",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: PoaNetworkConsensus [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "a7a0482e-7b70-4e5c-9a95-9e7afe895afb",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "4e2bcd18-8db8-4188-bd42-488f9177f7d0",
            "title": "default values",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "finalized should be false",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] default values finalized should be false",
                "timedOut": false,
                "duration": 81,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let validators = await poaNetworkConsensus.getValidators();\nlet finalized = await poaNetworkConsensus.finalized();\nvalidators.should.be.deep.equal([\n    masterOfCeremony\n]);\nfinalized.should.be.false;",
                "err": {},
                "isRoot": false,
                "uuid": "1db92c17-de9b-4ab7-bb8f-adf639fa746b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "checks systemAddress",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] default values checks systemAddress",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let systemAddress = await poaNetworkConsensus.systemAddress();\nsystemAddress.should.be.equal('0xfffffffffffffffffffffffffffffffffffffffe');",
                "err": {},
                "isRoot": false,
                "uuid": "189ea86f-bf7f-4726-8971-7b04fa8cc515",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "allows you to set current list of validators",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] default values allows you to set current list of validators",
                "timedOut": false,
                "duration": 100,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let validatorsList = [accounts[2], accounts[3], accounts[4]];\nlet poa = await PoaNetworkConsensus.new(masterOfCeremony, validatorsList);\nlet validators = await poa.getValidators();\nlet finalized = await poa.finalized();\nvalidators.should.be.deep.equal([\n    masterOfCeremony,\n    ...validatorsList\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "c96ca451-5bc9-4164-bda1-fbcad016b9f0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1db92c17-de9b-4ab7-bb8f-adf639fa746b",
              "189ea86f-bf7f-4726-8971-7b04fa8cc515",
              "c96ca451-5bc9-4164-bda1-fbcad016b9f0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 194,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "9cc8210f-7068-475b-ae75-2c472efe38be",
            "title": "#finalizeChange",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should only be called by systemAddress",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #finalizeChange should only be called by systemAddress",
                "timedOut": false,
                "duration": 72,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.finalizeChange().should.be.rejectedWith(ERROR_MSG);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.finalizeChange().should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "024f2591-03e2-4484-ac39-276da1ec3246",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set finalized to true",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #finalizeChange should set finalized to true",
                "timedOut": false,
                "duration": 61,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let finalized = await poaNetworkConsensus.finalized();\nfinalized.should.be.false;\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nfinalized = await poaNetworkConsensus.finalized();\nfinalized.should.be.true;",
                "err": {},
                "isRoot": false,
                "uuid": "b0e334ab-b9b7-4933-8c18-d5c7ac0b9944",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set currentValidators to pendingList",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #finalizeChange should set currentValidators to pendingList",
                "timedOut": false,
                "duration": 71,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.setSystemAddress(accounts[0]);\nconst { logs } = await poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nlet currentValidatorsLength = await poaNetworkConsensus.currentValidatorsLength();\nlet currentValidators = [];\nlet pendingList = [];\nfor (let i = 0; i < currentValidatorsLength.toNumber(10); i++) {\n    let validator = await poaNetworkConsensus.currentValidators(i);\n    currentValidators.push(validator);\n    let pending = await poaNetworkConsensus.pendingList(i);\n    pendingList.push(pending);\n}\ncurrentValidators.should.be.deep.equal(pendingList);\nlogs[0].event.should.be.equal('ChangeFinalized');\nlogs[0].args.newSet.should.be.deep.equal(currentValidators);",
                "err": {},
                "isRoot": false,
                "uuid": "1d2fdbd2-61b7-43ad-8044-039e7d55c67e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "set currentValidators to pendingList after addValidator call",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #finalizeChange set currentValidators to pendingList after addValidator call",
                "timedOut": false,
                "duration": 316,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.addValidator(accounts[1], true, {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait poaNetworkConsensus.addValidator(accounts[1], true);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nlet currentValidatorsLength = await poaNetworkConsensus.currentValidatorsLength();\nlet currentValidators = [];\nlet pendingList = [];\nfor (let i = 0; i < currentValidatorsLength.toNumber(10); i++) {\n    let validator = await poaNetworkConsensus.currentValidators(i);\n    currentValidators.push(validator);\n    let pending = await poaNetworkConsensus.pendingList(i);\n    pendingList.push(pending);\n}\ncurrentValidators.should.be.deep.equal(pendingList);\nawait poaNetworkConsensus.addValidator(accounts[2], true);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\ncurrentValidatorsLength = await poaNetworkConsensus.currentValidatorsLength()\nconst expected = [masterOfCeremony, accounts[1], accounts[2]];\ncurrentValidatorsLength = await poaNetworkConsensus.currentValidatorsLength();\ncurrentValidators = [];\npendingList = [];\nfor (let i = 0; i < currentValidatorsLength.toNumber(10); i++) {\n    let validator = await poaNetworkConsensus.currentValidators(i);\n    currentValidators.push(validator);\n    let pending = await poaNetworkConsensus.pendingList(i);\n    pendingList.push(pending);\n}\nexpected.should.be.deep.equal(pendingList);\nexpected.should.be.deep.equal(currentValidators);",
                "err": {},
                "isRoot": false,
                "uuid": "9a872e61-ec26-414e-9492-3a44c5112ec4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "024f2591-03e2-4484-ac39-276da1ec3246",
              "b0e334ab-b9b7-4933-8c18-d5c7ac0b9944",
              "1d2fdbd2-61b7-43ad-8044-039e7d55c67e",
              "9a872e61-ec26-414e-9492-3a44c5112ec4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 520,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "fb8098a2-4db6-4f1b-9272-fe762d286eb9",
            "title": "#addValidator",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be called only from keys manager",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #addValidator should be called only from keys manager",
                "timedOut": false,
                "duration": 74,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.addValidator(accounts[1], true, {from: accounts[2]}).should.be.rejectedWith(ERROR_MSG);\nawait proxyStorageMock.setKeysManagerMock(accounts[5]);\nawait poaNetworkConsensus.addValidator(accounts[1], true, {from: accounts[5]}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "387ab85c-1a1b-404d-98c2-d0d0cdd5c799",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow to add already existing validator",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #addValidator should not allow to add already existing validator",
                "timedOut": false,
                "duration": 71,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait poaNetworkConsensus.addValidator(accounts[1], true).should.be.fulfilled;\nawait poaNetworkConsensus.addValidator(accounts[1], true).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "733bf65e-e379-423c-8dc7-30f4b81b8095",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow 0x0 addresses",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #addValidator should not allow 0x0 addresses",
                "timedOut": false,
                "duration": 52,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait poaNetworkConsensus.addValidator('0x0', true).should.be.rejectedWith(ERROR_MSG);\nawait poaNetworkConsensus.addValidator('0x0000000000000000000000000000000000000000', true).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "f06cbb2d-4255-482d-b314-045bdbda645f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set validatorsState for new validator",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #addValidator should set validatorsState for new validator",
                "timedOut": false,
                "duration": 79,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait poaNetworkConsensus.addValidator(accounts[1], true).should.be.fulfilled;\nlet state = await poaNetworkConsensus.validatorsState(accounts[1]);\nlet pendingList = await poaNetworkConsensus.getPendingList();\nstate[0].should.be.true;\nstate[1].should.be.bignumber.equal(pendingList.length - 1)",
                "err": {},
                "isRoot": false,
                "uuid": "4432b7a6-9302-4b76-abf6-057d86a9a467",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set finalized to false",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #addValidator should set finalized to false",
                "timedOut": false,
                "duration": 65,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait poaNetworkConsensus.addValidator(accounts[1], true).should.be.fulfilled;\nlet finalized = await poaNetworkConsensus.finalized();\nfinalized.should.be.false;",
                "err": {},
                "isRoot": false,
                "uuid": "ba64ea40-7ca6-47be-9450-0da813f99f87",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should emit InitiateChange with blockhash and pendingList as params",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #addValidator should emit InitiateChange with blockhash and pendingList as params",
                "timedOut": false,
                "duration": 80,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nconst {logs} = await poaNetworkConsensus.addValidator(accounts[1], true).should.be.fulfilled;\nlet currentValidatorsLength = await poaNetworkConsensus.currentValidatorsLength();\nlet currentValidators = [];\nfor (let i = 0; i < currentValidatorsLength.toNumber(10); i++) {\n    let validator = await poaNetworkConsensus.currentValidators(i);\n    currentValidators.push(validator);\n}\ncurrentValidators.push(accounts[1]);\nlogs[0].args['newSet'].should.deep.equal(currentValidators);  \nlogs[0].event.should.be.equal('InitiateChange');",
                "err": {},
                "isRoot": false,
                "uuid": "73b54d99-73a6-45a4-8a7c-5315065d8771",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "387ab85c-1a1b-404d-98c2-d0d0cdd5c799",
              "733bf65e-e379-423c-8dc7-30f4b81b8095",
              "f06cbb2d-4255-482d-b314-045bdbda645f",
              "4432b7a6-9302-4b76-abf6-057d86a9a467",
              "ba64ea40-7ca6-47be-9450-0da813f99f87",
              "73b54d99-73a6-45a4-8a7c-5315065d8771"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 421,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "4d26d1f1-d846-4100-a9c3-b2dacd421906",
            "title": "#removeValidator",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should remove validator",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #removeValidator should remove validator",
                "timedOut": false,
                "duration": 104,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait poaNetworkConsensus.addValidator(accounts[1], true).should.be.fulfilled;\nawait poaNetworkConsensus.removeValidator(accounts[1], true).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "ed55120e-b450-4570-acce-2fadd4180021",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be called only from keys manager",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #removeValidator should be called only from keys manager",
                "timedOut": false,
                "duration": 116,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.removeValidator(accounts[1],true).should.be.rejectedWith(ERROR_MSG);\nawait proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait poaNetworkConsensus.addValidator(accounts[1], true).should.be.fulfilled;\nawait poaNetworkConsensus.removeValidator(accounts[1],true).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "b1126e34-3b03-42ec-a0b7-38fcab7342e1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should only be allowed to remove from existing set of validators",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #removeValidator should only be allowed to remove from existing set of validators",
                "timedOut": false,
                "duration": 56,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait poaNetworkConsensus.removeValidator(accounts[1],true).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "5d665231-daba-4e59-9f5f-c8688a7502e3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should decrease length of pendingList",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #removeValidator should decrease length of pendingList",
                "timedOut": false,
                "duration": 319,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait poaNetworkConsensus.addValidator(accounts[1], true).should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.addValidator(accounts[2], true).should.be.fulfilled;\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nlet currentValidatorsLength = await poaNetworkConsensus.currentValidatorsLength();\nlet pendingList = [];\nfor(let i = 0; i < currentValidatorsLength; i++){\n    let pending = await poaNetworkConsensus.pendingList(i);\n    pendingList.push(pending);\n}\nconst indexOfRemovedElement = pendingList.indexOf(accounts[1]);\npendingList.splice(indexOfRemovedElement, 1);\nconst { logs } = await poaNetworkConsensus.removeValidator(accounts[1],true).should.be.fulfilled;\nlet pendingListFromContract = logs[0].args['newSet'];\npendingListFromContract.length.should.be.equal(currentValidatorsLength.toNumber(10) - 1);\npendingList.should.be.deep.equal(pendingListFromContract);\nlogs[0].event.should.be.equal('InitiateChange');\nconst expected = [masterOfCeremony, accounts[2]];\nexpected.should.be.deep.equal(pendingList);",
                "err": {},
                "isRoot": false,
                "uuid": "34f99cdc-3fb4-47ab-8c17-11b2d8a3a0e3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change validatorsState",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #removeValidator should change validatorsState",
                "timedOut": false,
                "duration": 117,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait poaNetworkConsensus.addValidator(accounts[1], true).should.be.fulfilled;\nawait poaNetworkConsensus.removeValidator(accounts[1],true).should.be.fulfilled;\nconst state = await poaNetworkConsensus.validatorsState(accounts[1]);\nstate[0].should.be.false;\nstate[1].should.be.bignumber.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "7a9afce8-700e-4887-b677-e983ee7c6342",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set finalized to false",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #removeValidator should set finalized to false",
                "timedOut": false,
                "duration": 112,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait poaNetworkConsensus.addValidator(accounts[1], true).should.be.fulfilled;\nawait poaNetworkConsensus.removeValidator(accounts[1],true).should.be.fulfilled;\nconst finalized = await poaNetworkConsensus.finalized();\nfinalized.should.be.false;",
                "err": {},
                "isRoot": false,
                "uuid": "6d4c7c7c-4370-47ab-8b2c-8e2efb83bc23",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ed55120e-b450-4570-acce-2fadd4180021",
              "b1126e34-3b03-42ec-a0b7-38fcab7342e1",
              "5d665231-daba-4e59-9f5f-c8688a7502e3",
              "34f99cdc-3fb4-47ab-8c17-11b2d8a3a0e3",
              "7a9afce8-700e-4887-b677-e983ee7c6342",
              "6d4c7c7c-4370-47ab-8b2c-8e2efb83bc23"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 824,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "96f219db-8b3c-4539-a548-9a6d81df8663",
            "title": "#setProxyStorage",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "can be called by any validator",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage can be called by any validator",
                "timedOut": false,
                "duration": 66,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.setIsMasterOfCeremonyInitializedMock(false);\nawait poaNetworkConsensus.setProxyStorage(nonValidator, {from: accounts[6]}).should.be.rejectedWith(ERROR_MSG);\nawait poaNetworkConsensus.setProxyStorage(accounts[5], {from: validator}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "6adbefe3-2e3f-4da4-a261-1a581bc52c6c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "can only be called once",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage can only be called once",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// we already call it in the beforeEach block, hence why I expect it to be rejected\nawait poaNetworkConsensus.setProxyStorage(nonValidator, {from: nonValidator}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "97d02d76-6519-424d-b5cf-a799cb3cceeb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be set to 0x0 address",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage cannot be set to 0x0 address",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.setIsMasterOfCeremonyInitializedMock(false);\nawait poaNetworkConsensus.setProxyStorage('0x0000000000000000000000000000000000000000', {from: validator}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "8f306e37-5c62-4295-bec4-e9396eb13baf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets proxyStorage",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage sets proxyStorage",
                "timedOut": false,
                "duration": 64,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newProxyStorage = accounts[3];\nawait poaNetworkConsensus.setIsMasterOfCeremonyInitializedMock(false);\nawait poaNetworkConsensus.setProxyStorage(newProxyStorage, {from: validator}).should.be.fulfilled;\n(await poaNetworkConsensus.proxyStorage()).should.be.equal(newProxyStorage);",
                "err": {},
                "isRoot": false,
                "uuid": "189d179b-0c6b-4523-b3fc-9d892f8fb7d5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets isMasterOfCeremonyInitialized",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage sets isMasterOfCeremonyInitialized",
                "timedOut": false,
                "duration": 62,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newProxyStorage = accounts[3];\nawait poaNetworkConsensus.setIsMasterOfCeremonyInitializedMock(false);\nawait poaNetworkConsensus.setProxyStorage(newProxyStorage, {from: validator}).should.be.fulfilled;\n(await poaNetworkConsensus.isMasterOfCeremonyInitialized()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "e76448c0-280e-45de-8610-1931fc30770b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "emits MoCInitializedProxyStorage",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage emits MoCInitializedProxyStorage",
                "timedOut": false,
                "duration": 43,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newProxyStorage = accounts[3];\nawait poaNetworkConsensus.setIsMasterOfCeremonyInitializedMock(false);\nconst {logs} = await poaNetworkConsensus.setProxyStorage(newProxyStorage, {from: validator}).should.be.fulfilled;\nlogs[0].event.should.be.equal('MoCInitializedProxyStorage');\nlogs[0].args.proxyStorage.should.be.equal(newProxyStorage);",
                "err": {},
                "isRoot": false,
                "uuid": "de1bebde-7c2d-4791-af39-e9c7823d1ccc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "#getKeysManager",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage #getKeysManager",
                "timedOut": false,
                "duration": 59,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newKeysManager = accounts[3];\nawait poaNetworkConsensus.setIsMasterOfCeremonyInitializedMock(false);\nawait proxyStorageMock.setKeysManagerMock(newKeysManager);\n(await poaNetworkConsensus.getKeysManager()).should.be.equal(newKeysManager);",
                "err": {},
                "isRoot": false,
                "uuid": "6c8fcf82-c047-43b6-a94c-c254b9ebc6d0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "#getVotingToChangeKeys",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage #getVotingToChangeKeys",
                "timedOut": false,
                "duration": 64,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newVotingToChangeKeys = accounts[3];\nawait poaNetworkConsensus.setIsMasterOfCeremonyInitializedMock(false);\nawait proxyStorageMock.setVotingContractMock(newVotingToChangeKeys);\n(await poaNetworkConsensus.getVotingToChangeKeys()).should.be.equal(newVotingToChangeKeys);",
                "err": {},
                "isRoot": false,
                "uuid": "3421a0c1-9176-445f-9964-55b1450d50ab",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6adbefe3-2e3f-4da4-a261-1a581bc52c6c",
              "97d02d76-6519-424d-b5cf-a799cb3cceeb",
              "8f306e37-5c62-4295-bec4-e9396eb13baf",
              "189d179b-0c6b-4523-b3fc-9d892f8fb7d5",
              "e76448c0-280e-45de-8610-1931fc30770b",
              "de1bebde-7c2d-4791-af39-e9c7823d1ccc",
              "6c8fcf82-c047-43b6-a94c-c254b9ebc6d0",
              "3421a0c1-9176-445f-9964-55b1450d50ab"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 415,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "ddbf6cd1-0a86-4a3f-9593-0d98b4729a9d",
            "title": "#isValidator",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns address of miner",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #isValidator returns address of miner",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await poaNetworkConsensus.isValidator(masterOfCeremony)).should.be.equal(true);\n(await poaNetworkConsensus.isValidator(accounts[2])).should.be.equal(false);",
                "err": {},
                "isRoot": false,
                "uuid": "eae47876-7af3-46dd-9c9a-ce89e244f9fa",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "eae47876-7af3-46dd-9c9a-ce89e244f9fa"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 24,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "32e602e8-c9cd-433a-a822-4dd2548d7348",
        "title": "Contract: ProxyStorage [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/proxy_storage_test.js",
        "file": "/test/proxy_storage_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: ProxyStorage [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 471,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "f3d37393-e834-4225-89cf-003300bc02ee",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: ProxyStorage [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "e484fcf3-a925-4fb6-bcd7-83d9e0639dfa",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: ProxyStorage [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 154,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "poaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony, []);\nproxyStorage = await ProxyStorageMock.new(poaNetworkConsensus.address);\nvalidatorMetadata = await ValidatorMetadata.new();\nvalidatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorage.address, validatorMetadata.address);",
            "err": {},
            "isRoot": false,
            "uuid": "00858de5-2e5f-4b18-93bd-177219651fb8",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: ProxyStorage [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "242fa550-10b5-4395-9ae2-21ce349e2a5a",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "da3e16ea-5f46-4c72-9211-25009f3f6003",
            "title": "#constructor",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/proxy_storage_test.js",
            "file": "/test/proxy_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "sets MoC and Poa",
                "fullTitle": "Contract: ProxyStorage [all features] #constructor sets MoC and Poa",
                "timedOut": false,
                "duration": 28,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "poaNetworkConsensus.address.should.be.equal(\n  await proxyStorage.getPoaConsensus()\n);\ntrue.should.be.equal(\n  await proxyStorage.isValidator(masterOfCeremony)\n);",
                "err": {},
                "isRoot": false,
                "uuid": "e0de80fa-1c75-4195-b775-da2bff44cd9b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e0de80fa-1c75-4195-b775-da2bff44cd9b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 28,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "be9ca879-cd8a-4deb-82f2-bf5c0649429d",
            "title": "#initializeAddresses",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/proxy_storage_test.js",
            "file": "/test/proxy_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "sets all addresses",
                "fullTitle": "Contract: ProxyStorage [all features] #initializeAddresses sets all addresses",
                "timedOut": false,
                "duration": 130,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.initializeAddresses(\n  keysManager,\n  votingToChangeKeys,\n  votingToChangeMinThreshold,\n  votingToChangeProxy,\n  ballotsStorage,\n  validatorMetadataEternalStorage.address,\n  {from: accounts[2]}\n).should.be.rejectedWith(ERROR_MSG);\nconst {logs} = await proxyStorage.initializeAddresses(\n  keysManager,\n  votingToChangeKeys,\n  votingToChangeMinThreshold,\n  votingToChangeProxy,\n  ballotsStorage,\n  validatorMetadataEternalStorage.address,\n).should.be.fulfilled;\nkeysManager.should.be.equal(\n  await proxyStorage.getKeysManager()\n);\nvotingToChangeKeys.should.be.equal(\n  await proxyStorage.getVotingToChangeKeys()\n);\nvotingToChangeMinThreshold.should.be.equal(\n  await proxyStorage.getVotingToChangeMinThreshold()\n);\nvotingToChangeProxy.should.be.equal(\n  await proxyStorage.getVotingToChangeProxy()\n);\nballotsStorage.should.be.equal(\n  await proxyStorage.getBallotsStorage()\n);\nvalidatorMetadataEternalStorage.address.should.be.equal(\n  await proxyStorage.getValidatorMetadata()\n);\nlogs[0].event.should.be.equal('ProxyInitialized');\nlogs[0].args.keysManager.should.be.equal(keysManager);\nlogs[0].args.votingToChangeKeys.should.be.equal(votingToChangeKeys);\nlogs[0].args.votingToChangeMinThreshold.should.be.equal(votingToChangeMinThreshold);\nlogs[0].args.votingToChangeProxy.should.be.equal(votingToChangeProxy);\nlogs[0].args.ballotsStorage.should.be.equal(ballotsStorage);\nlogs[0].args.validatorMetadataEternalStorage.should.be.equal(validatorMetadataEternalStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "ed78802b-c9bd-40d8-b84e-dc6a5234d43c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevents Moc to call it more than once",
                "fullTitle": "Contract: ProxyStorage [all features] #initializeAddresses prevents Moc to call it more than once",
                "timedOut": false,
                "duration": 73,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "false.should.be.equal(await proxyStorage.mocInitialized());\nconst {logs} = await proxyStorage.initializeAddresses(\n  keysManager,\n  votingToChangeKeys,\n  votingToChangeMinThreshold,\n  votingToChangeProxy,\n  ballotsStorage,\n  validatorMetadataEternalStorage.address\n).should.be.fulfilled;\ntrue.should.be.equal(await proxyStorage.mocInitialized());\nawait proxyStorage.initializeAddresses(\n  keysManager,\n  votingToChangeKeys,\n  votingToChangeMinThreshold,\n  votingToChangeProxy,\n  ballotsStorage,\n  validatorMetadataEternalStorage.address\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "555fb125-9f32-489a-afeb-065e800c7173",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ed78802b-c9bd-40d8-b84e-dc6a5234d43c",
              "555fb125-9f32-489a-afeb-065e800c7173"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 203,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "b6208593-9e1d-4d8a-89e9-11bcbae89f33",
            "title": "#setContractAddress",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/proxy_storage_test.js",
            "file": "/test/proxy_storage_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress \"before each\" hook",
                "timedOut": false,
                "duration": 38,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.initializeAddresses(\n  keysManager,\n  votingToChangeKeys,\n  votingToChangeMinThreshold,\n  votingToChangeProxy,\n  ballotsStorage,\n  validatorMetadataEternalStorage.address,\n  {from: masterOfCeremony}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "467dd60f-b32f-4541-81f7-1082058b95e9",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "can only be called from votingToChangeProxy address",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress can only be called from votingToChangeProxy address",
                "timedOut": false,
                "duration": 38,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setContractAddress(1, accounts[2], {from: votingToChangeKeys}).should.be.rejectedWith(ERROR_MSG);\nawait proxyStorage.setContractAddress(1, accounts[2], {from: votingToChangeProxy}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "d082ed95-2f88-40d5-9ff9-31aa1968d1ca",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be set to 0x0 address",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress cannot be set to 0x0 address",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setContractAddress(1, '0x0000000000000000000000000000000000000000', {from: votingToChangeProxy}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "ef3e00dd-c6c3-49d8-97a9-9eec633cd92c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets keysManager",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress sets keysManager",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setContractAddress(1, accounts[2], {from: votingToChangeProxy}).should.be.fulfilled;\naccounts[2].should.be.equal(\n  await proxyStorage.getKeysManager()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "f05ea120-2adb-4000-9b26-51bfbf3f1f33",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets votingToChangeKeys",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress sets votingToChangeKeys",
                "timedOut": false,
                "duration": 41,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setContractAddress(2, accounts[1], {from: votingToChangeProxy}).should.be.fulfilled;\naccounts[1].should.be.equal(\n  await proxyStorage.getVotingToChangeKeys()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "4fe0581a-9fd2-4001-9606-7fa98725350d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets votingToChangeMinThreshold",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress sets votingToChangeMinThreshold",
                "timedOut": false,
                "duration": 77,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setContractAddress(3, accounts[2], {from: votingToChangeProxy}).should.be.fulfilled;\naccounts[2].should.be.equal(\n  await proxyStorage.getVotingToChangeMinThreshold()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "5550a65f-aea9-4857-8994-da9ecd7159d8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets votingToChangeProxy",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress sets votingToChangeProxy",
                "timedOut": false,
                "duration": 32,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setContractAddress(4, accounts[3], {from: votingToChangeProxy}).should.be.fulfilled;\naccounts[3].should.be.equal(\n  await proxyStorage.getVotingToChangeProxy()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "cb59637c-c00b-4771-8d58-9a1def1f2e24",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets ballotsStorage",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress sets ballotsStorage",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setContractAddress(5, accounts[4], {from: votingToChangeProxy}).should.be.fulfilled;\naccounts[4].should.be.equal(\n  await proxyStorage.getBallotsStorage()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "5c287797-6f0d-4921-aeb6-daeac5bf37bf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets poaConsensus",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress sets poaConsensus",
                "timedOut": false,
                "duration": 35,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setContractAddress(6, accounts[5], {from: votingToChangeProxy}).should.be.fulfilled;\naccounts[5].should.be.equal(\n  await proxyStorage.getPoaConsensus()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "f805707b-a615-4607-9956-53bee8ff65b5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets validatorMetadata",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress sets validatorMetadata",
                "timedOut": false,
                "duration": 101,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let validatorMetadataNew = await ValidatorMetadata.new();\nawait proxyStorage.setContractAddress(7, validatorMetadataNew.address, {from: votingToChangeProxy}).should.be.fulfilled;\n\nlet eternalProxyAddress = await proxyStorage.getValidatorMetadata();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nvalidatorMetadataNew.address.should.be.equal(\n  await eternalProxy.implementation()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "633a7a59-06df-4e35-ad5e-2a37257a0f63",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets validatorMetadataEternalStorage",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress sets validatorMetadataEternalStorage",
                "timedOut": false,
                "duration": 62,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let validatorMetadataEternalStorageNew = await EternalStorageProxy.new(proxyStorage.address, validatorMetadata.address);\nawait proxyStorage.setContractAddress(8, validatorMetadataEternalStorageNew.address, {from: votingToChangeProxy}).should.be.fulfilled;\nvalidatorMetadataEternalStorageNew.address.should.be.equal(\n  await proxyStorage.getValidatorMetadata()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "98db1879-82e7-48e1-812b-6eb6999925d2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d082ed95-2f88-40d5-9ff9-31aa1968d1ca",
              "ef3e00dd-c6c3-49d8-97a9-9eec633cd92c",
              "f05ea120-2adb-4000-9b26-51bfbf3f1f33",
              "4fe0581a-9fd2-4001-9606-7fa98725350d",
              "5550a65f-aea9-4857-8994-da9ecd7159d8",
              "cb59637c-c00b-4771-8d58-9a1def1f2e24",
              "5c287797-6f0d-4921-aeb6-daeac5bf37bf",
              "f805707b-a615-4607-9956-53bee8ff65b5",
              "633a7a59-06df-4e35-ad5e-2a37257a0f63",
              "98db1879-82e7-48e1-812b-6eb6999925d2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 467,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "17871b87-6c48-4fb2-9ff2-2772ecbac241",
        "title": "Contract: Voting to change keys [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_test.js",
        "file": "/test/voting_to_change_keys_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: Voting to change keys [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 280,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "fb7de166-ed89-4610-822b-dd6f06cbf289",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: Voting to change keys [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "87ea10a7-a9e7-4994-87e5-d75637fa38d7",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: Voting to change keys [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 341,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "poaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony, []);\nproxyStorageMock = await ProxyStorageMock.new(poaNetworkConsensusMock.address);\nkeysManager = await KeysManagerMock.new(proxyStorageMock.address, poaNetworkConsensusMock.address, masterOfCeremony, \"0x0000000000000000000000000000000000000000\");\nballotsStorage = await BallotsStorage.new(proxyStorageMock.address);\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\nvoting = await VotingToChangeKeysMock.new(proxyStorageMock.address);\nawait proxyStorageMock.initializeAddresses(\n  keysManager.address,\n  voting.address,\n  masterOfCeremony,\n  masterOfCeremony,\n  ballotsStorage.address,\n  masterOfCeremony\n);",
            "err": {},
            "isRoot": false,
            "uuid": "84f594ea-bbc2-43e9-9f48-ac5e61b6ca47",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: Voting to change keys [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "76673288-d9c5-4dcd-b9d4-aec7d6d6434a",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "ac014548-5d75-4a17-b468-ac18724d2eba",
            "title": "#constructor",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_test.js",
            "file": "/test/voting_to_change_keys_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: Voting to change keys [all features] #constructor happy path",
                "timedOut": false,
                "duration": 297,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey, accounts[1]).should.be.fulfilled;\nconst VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nconst VOTING_END_DATE = moment.utc().add(10, 'days').unix();\nconst id = await voting.nextBallotId();\nconst {logs} = await voting.createVotingForKeys(VOTING_START_DATE, VOTING_END_DATE, accounts[1], 1, accounts[2], 1, \"memo\",{from: votingKey});\nconst startTime = await voting.getStartTime(id.toNumber());\nconst endTime = await voting.getEndTime(id.toNumber());\nconst keysManagerFromContract = await voting.getKeysManager();\nstartTime.should.be.bignumber.equal(VOTING_START_DATE);\nendTime.should.be.bignumber.equal(VOTING_END_DATE);\nkeysManagerFromContract.should.be.equal(keysManager.address);\nlogs[0].event.should.be.equal(\"BallotCreated\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.creator.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "40e84966-698f-410a-ac77-2595e53e8f43",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create voting with invalid duration",
                "fullTitle": "Contract: Voting to change keys [all features] #constructor should not let create voting with invalid duration",
                "timedOut": false,
                "duration": 83,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let VOTING_START_DATE = moment.utc().add(10, 'days').unix();\nlet VOTING_END_DATE = moment.utc().add(2, 'seconds').unix();\nawait voting.createVotingForKeys(VOTING_START_DATE, VOTING_END_DATE, accounts[1], 1, accounts[2], 1, \"memo\",{from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = 0\nVOTING_END_DATE = moment.utc().add(2, 'seconds').unix();\nawait voting.createVotingForKeys(VOTING_START_DATE, VOTING_END_DATE, accounts[1], 1, accounts[2], 1, \"memo\",{from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = moment.utc().add(2, 'seconds').unix();\nVOTING_END_DATE = 0\nawait voting.createVotingForKeys(VOTING_START_DATE, VOTING_END_DATE, accounts[1], 1, accounts[2], 1, \"memo\",{from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "74dfb38a-8918-4669-83ae-42b2b7926aad",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create more ballots than the limit",
                "fullTitle": "Contract: Voting to change keys [all features] #constructor should not let create more ballots than the limit",
                "timedOut": false,
                "duration": 8779,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey, accounts[1]).should.be.fulfilled;\nconst VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nconst VOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createVotingForKeys(VOTING_START_DATE, VOTING_END_DATE, accounts[1], 1, accounts[2], 1, \"memo\", {from: votingKey});\nawait voting.createVotingForKeys(VOTING_START_DATE, VOTING_END_DATE, accounts[1], 1, accounts[2], 1, \"memo\", {from: votingKey});\nnew web3.BigNumber(200).should.be.bignumber.equal(await voting.getBallotLimitPerValidator());\nawait addValidators({proxyStorageMock, keysManager, poaNetworkConsensusMock}); //add 100 validators, so total will be 101 validator\nnew web3.BigNumber(1).should.be.bignumber.equal(await voting.getBallotLimitPerValidator());\nawait voting.createVotingForKeys(VOTING_START_DATE, VOTING_END_DATE, accounts[1], 1, accounts[2], 1, \"memo\", {from: votingKey}).should.be.rejectedWith(ERROR_MSG)",
                "err": {},
                "isRoot": false,
                "uuid": "630fc6fd-8e8d-48ea-9c6d-4821b83ad28a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "40e84966-698f-410a-ac77-2595e53e8f43",
              "74dfb38a-8918-4669-83ae-42b2b7926aad",
              "630fc6fd-8e8d-48ea-9c6d-4821b83ad28a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 9159,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "a4fbd0ed-926a-41a3-b384-28849813afc7",
            "title": "#vote",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_test.js",
            "file": "/test/voting_to_change_keys_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: Voting to change keys [all features] #vote \"before each\" hook",
                "timedOut": false,
                "duration": 287,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey, accounts[1]).should.be.fulfilled;\nid = await voting.nextBallotId();\nawait voting.createVotingForKeys(VOTING_START_DATE, VOTING_END_DATE, accounts[1], 1, accounts[1], 1, \"memo\", {from: votingKey});",
                "err": {},
                "isRoot": false,
                "uuid": "3834aea4-3c52-4f34-b03a-26da6212cee8",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "should let a validator to vote",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should let a validator to vote",
                "timedOut": false,
                "duration": 102,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.accept, {from: votingKey}).should.be.fulfilled;\nlet progress = await voting.getProgress(id);\nprogress.should.be.bignumber.equal(1);\nlet totalVoters = await voting.getTotalVoters(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(1);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "0909c5db-9265-4f50-95a2-2bfb867d3b7c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "reject vote should be accepted",
                "fullTitle": "Contract: Voting to change keys [all features] #vote reject vote should be accepted",
                "timedOut": false,
                "duration": 111,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nlet progress = await voting.getProgress(id);\nprogress.should.be.bignumber.equal(-1);\nlet totalVoters = await voting.getTotalVoters(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(2);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "f3a2e4b4-3d57-4df2-be98-17209f209934",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow multiple voters to vote",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should allow multiple voters to vote",
                "timedOut": false,
                "duration": 594,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait keysManager.addVotingKey(accounts[3], accounts[1]).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\n// add new voter\nawait keysManager.addMiningKey(accounts[2]).should.be.fulfilled;\nawait keysManager.addVotingKey(accounts[4], accounts[2]).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: accounts[4]}).should.be.fulfilled;\nlet progress = await voting.getProgress(id);\nprogress.should.be.bignumber.equal(-2);\nlet totalVoters = await voting.getTotalVoters(id);\ntotalVoters.should.be.bignumber.equal(2);\nawait keysManager.addMiningKey(accounts[3]).should.be.fulfilled;\nawait keysManager.addVotingKey(accounts[5], accounts[3]).should.be.fulfilled;\nawait voting.vote(id, choice.accept, {from: accounts[5]}).should.be.fulfilled;\nprogress = await voting.getProgress(id);\nprogress.should.be.bignumber.equal(-1);\ntotalVoters = await voting.getTotalVoters(id);\ntotalVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "0e0fb06a-f1db-4eb4-a942-a2bb5b6d6c64",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote nonVoting key",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should not let vote nonVoting key",
                "timedOut": false,
                "duration": 40,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "5254fca0-ca8b-4599-a186-1686cb452e9c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote before startTime key",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should not let vote before startTime key",
                "timedOut": false,
                "duration": 84,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE - 1);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "0dc2fc5e-d23f-467c-95cf-db2497c13a58",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote after endTime key",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should not let vote after endTime key",
                "timedOut": false,
                "duration": 81,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE + 1);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "86d1e324-c528-43ee-8775-3ce2021cab39",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with already voted key",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should not let vote with already voted key",
                "timedOut": false,
                "duration": 153,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "69d6b640-412b-4e87-aeaa-37c4c73f4d72",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid choice",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should not let vote with invalid choice",
                "timedOut": false,
                "duration": 143,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, 0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, 3, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "cd883109-3aa7-4065-98d2-39dec1310c71",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid id",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should not let vote with invalid id",
                "timedOut": false,
                "duration": 156,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(99, 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(-3, 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "17b8715a-c9b7-43f8-9a63-c5eaecc47138",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0909c5db-9265-4f50-95a2-2bfb867d3b7c",
              "f3a2e4b4-3d57-4df2-be98-17209f209934",
              "0e0fb06a-f1db-4eb4-a942-a2bb5b6d6c64",
              "5254fca0-ca8b-4599-a186-1686cb452e9c",
              "0dc2fc5e-d23f-467c-95cf-db2497c13a58",
              "86d1e324-c528-43ee-8775-3ce2021cab39",
              "69d6b640-412b-4e87-aeaa-37c4c73f4d72",
              "cd883109-3aa7-4065-98d2-39dec1310c71",
              "17b8715a-c9b7-43f8-9a63-c5eaecc47138"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1464,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "b7b1c836-f282-419b-a511-9a611f86e88c",
            "title": "#finalize",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_test.js",
            "file": "/test/voting_to_change_keys_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize \"before each\" hook",
                "timedOut": false,
                "duration": 332,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey, accounts[1]).should.be.fulfilled;\nawait keysManager.addMiningKey(accounts[2]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey2, accounts[2]).should.be.fulfilled;\nawait keysManager.addMiningKey(accounts[4]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey3, accounts[4]).should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(voting.address);",
                "err": {},
                "isRoot": false,
                "uuid": "12771f43-fd0c-4849-b1c1-e87c81b1ca48",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path - no action since it didnot meet minimum number of totalVoters",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize happy path - no action since it didnot meet minimum number of totalVoters",
                "timedOut": false,
                "duration": 487,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// Ballot to Add Payout Key for miner account[1]\nawait voting.createVotingForKeys(VOTING_START_DATE, VOTING_END_DATE, payoutKeyToAdd, 3, accounts[1], 1, \"memo\",{from: votingKey});\nlet activeBallotsLength = await voting.activeBallotsLength();\nvotingId = await voting.activeBallots(activeBallotsLength.toNumber() - 1);\n// console.log(votingId);\nawait voting.finalize(votingId, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.finalize(votingId).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(VOTING_END_DATE + 1);\nconst {logs} = await voting.finalize(votingId, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nactiveBallotsLength = await voting.activeBallotsLength();\nactiveBallotsLength.should.be.bignumber.equal(0);\ntrue.should.be.equal(await voting.getIsFinalized(votingId));\n// Finalized(msg.sender);\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.voter.should.be.equal(votingKey);\nconst votingState = await voting.votingState(votingId);\n\nvotingState.should.be.deep.equal(\n  [\n    new web3.BigNumber(VOTING_START_DATE), //uint256 startTime;\n    new web3.BigNumber(VOTING_END_DATE), //uint256 endTime\n    payoutKeyToAdd, //address affectedKey\n    new web3.BigNumber(3), //uint256 affectedKeyType\n    accounts[1],            //address miningKey\n    new web3.BigNumber(1),  //uint256 totalVoters\n    new web3.BigNumber(-1), //int progress\n    true,                   //bool isFinalized\n    new web3.BigNumber(3),  //uint8 quorumState\n    new web3.BigNumber(1),  //uint256 ballotType\n    new web3.BigNumber(0),  //uint256 index\n    new web3.BigNumber(3),   //uint256 minThresholdOfVoters\n    miningKeyForVotingKey,   // miningKeyCreator\n    \"memo\"\n  ]\n)\ntrue.should.be.equal(\n  await voting.hasAlreadyVoted(votingId, votingKey)\n);\nconst keysState = await keysManager.validatorKeys(accounts[1]);\nkeysState.should.be.deep.equal(\n  [ votingKey,\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "0fd0f74b-2c91-4428-92ea-4fe4fd5ee004",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize addition of payout key",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize addition of payout key",
                "timedOut": false,
                "duration": 592,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// Ballot to Add Payout Key for miner account[1]\nawait deployAndTestBallot({\n  _affectedKey: payoutKeyToAdd,\n  _affectedKeyType: 3,\n  _miningKey: accounts[1],\n  _ballotType: 1,\n  \n})\nconst keysState = await keysManager.validatorKeys(accounts[1]);\nkeysState.should.be.deep.equal(\n  [ votingKey,\n  payoutKeyToAdd,\n  true,\n  true,\n  true ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "c2e692d5-fa2b-49fe-b146-416a89e0770d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize addition of VotingKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize addition of VotingKey",
                "timedOut": false,
                "duration": 729,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait keysManager.addMiningKey(miningKey).should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\nlet votingKeyToAdd = accounts[5];\n\n  // uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n  // uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: votingKeyToAdd,\n  _affectedKeyType: 2,\n  _miningKey: miningKey,\n  _ballotType: 1,\n  \n})\nconst keysState = await keysManager.validatorKeys(miningKey);\nkeysState.should.be.deep.equal(\n  [ votingKeyToAdd,\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "09c25455-2d90-468e-af74-d36748adb26b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot create ballot for using previous mining key",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize cannot create ballot for using previous mining key",
                "timedOut": false,
                "duration": 1510,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(voting.address);\nlet miningKey = accounts[6];\n\n  // uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n  // uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: miningKey,\n  _affectedKeyType: 1,\n  _miningKey: '0x0000000000000000000000000000000000000000',\n  _ballotType: 1,\n  \n})\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\ntrue.should.be.equal(await poaNetworkConsensusMock.isValidator(miningKey));\nlet validators = await poaNetworkConsensusMock.getValidators();\nawait voting.setTime(VOTING_START_DATE - 1);\nawait deployAndTestBallot({\n  _affectedKey: accounts[5],\n  _affectedKeyType: 1,\n  _miningKey: miningKey,\n  _ballotType: 3,\n  \n})\nawait voting.setTime(VOTING_START_DATE - 1);\nawait voting.createVotingForKeys(VOTING_START_DATE, VOTING_END_DATE, miningKey, 1, accounts[5], 3, \"memo\",{from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "a03cc01f-ce35-4eb3-be2b-d278c284f9ec",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize addition of MiningKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize addition of MiningKey",
                "timedOut": false,
                "duration": 758,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(voting.address);\nlet miningKey = accounts[6];\n\n  // uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n  // uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: miningKey,\n  _affectedKeyType: 1,\n  _miningKey: '0x0000000000000000000000000000000000000000',\n  _ballotType: 1,\n  \n})\nconst keysState = await keysManager.validatorKeys(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false ]\n)\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators();\nvalidators.should.contain(miningKey);\ntrue.should.be.equal(await poaNetworkConsensusMock.isValidator(miningKey));",
                "err": {},
                "isRoot": false,
                "uuid": "a2fe334d-acb7-4876-a5d3-47d0cd517f65",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize removal of MiningKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize removal of MiningKey",
                "timedOut": false,
                "duration": 797,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait keysManager.addMiningKey(miningKey).should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\n  // uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n  // uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: miningKey,\n  _affectedKeyType: 1,\n  _miningKey: miningKey,\n  _ballotType: 2,\n  \n})\nconst keysState = await keysManager.validatorKeys(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false ]\n)\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators();\nvalidators.should.not.contain(miningKey);\nfalse.should.be.equal(await poaNetworkConsensusMock.isValidator(miningKey));",
                "err": {},
                "isRoot": false,
                "uuid": "706bb3fc-c4fc-4499-986b-c04bd629ae4e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize removal of VotingKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize removal of VotingKey",
                "timedOut": false,
                "duration": 710,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nlet votingKeyToAdd = accounts[5];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait keysManager.addMiningKey(miningKey).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKeyToAdd, miningKey).should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\n\n  // uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n  // uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: votingKeyToAdd,\n  _affectedKeyType: 2,\n  _miningKey: miningKey,\n  _ballotType: 2,\n  \n})\nconst keysState = await keysManager.validatorKeys(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "5db012b5-f466-4b87-b037-11d4dcd1d4d4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize removal of PayoutKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize removal of PayoutKey",
                "timedOut": false,
                "duration": 817,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nlet affectedKey = accounts[5];\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait keysManager.addMiningKey(miningKey).should.be.fulfilled;\nawait keysManager.addPayoutKey(affectedKey, miningKey).should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\n\n  // uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n  // uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: affectedKey,\n  _affectedKeyType: 3,\n  _miningKey: miningKey,\n  _ballotType: 2,\n  \n})\nconst keysState = await keysManager.validatorKeys(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "e6a07977-4ed8-4386-9a91-33657a85dad6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize swap of VotingKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize swap of VotingKey",
                "timedOut": false,
                "duration": 810,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nlet affectedKey = accounts[5];\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait keysManager.addMiningKey(miningKey).should.be.fulfilled;\nawait keysManager.addVotingKey(affectedKey, miningKey).should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\n\n  // uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n  // uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nlet newVotingKey = accounts[2];\nawait deployAndTestBallot({\n  _affectedKey: newVotingKey,\n  _affectedKeyType: 2,\n  _miningKey: miningKey,\n  _ballotType: 3,\n  \n})\nconst keysState = await keysManager.validatorKeys(miningKey);\nkeysState.should.be.deep.equal(\n  [ newVotingKey,\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "f03328bd-c8db-4c84-8cd4-56229cbd0874",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize swap of PayoutKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize swap of PayoutKey",
                "timedOut": false,
                "duration": 759,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nlet affectedKey = accounts[5];\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait keysManager.addMiningKey(miningKey).should.be.fulfilled;\nawait keysManager.addPayoutKey(affectedKey, miningKey).should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\n\n  // uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n  // uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nlet newPayoutKey = accounts[2];\nawait deployAndTestBallot({\n  _affectedKey: newPayoutKey,\n  _affectedKeyType: 3,\n  _miningKey: miningKey,\n  _ballotType: 3,\n  \n})\nconst keysState = await keysManager.validatorKeys(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  newPayoutKey,\n  true,\n  false,\n  true ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "71e45900-6115-4a3c-8e38-cf0d65eb2449",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize swap of MiningKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize swap of MiningKey",
                "timedOut": false,
                "duration": 852,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nlet affectedKey = accounts[5];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait keysManager.addMiningKey(miningKey).should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\n  // uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n  // uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: affectedKey,\n  _affectedKeyType: 1,\n  _miningKey: miningKey,\n  _ballotType: 3,\n  \n})\nconst keysState = await keysManager.validatorKeys(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false ]\n)\nconst keysStateNew = await keysManager.validatorKeys(affectedKey);\nkeysStateNew.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false ]\n)\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators();\nvalidators.should.not.contain(miningKey);\nvalidators.should.contain(affectedKey);\nfalse.should.be.equal(await poaNetworkConsensusMock.isValidator(miningKey));\ntrue.should.be.equal(await poaNetworkConsensusMock.isValidator(affectedKey));",
                "err": {},
                "isRoot": false,
                "uuid": "a400dc06-dc21-4e58-abb6-79eddf6c4f97",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevent double finalize",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize prevent double finalize",
                "timedOut": false,
                "duration": 1076,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nlet affectedKey = accounts[5];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait keysManager.addMiningKey(miningKey).should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(voting.address);\nawait voting.createVotingForKeys(VOTING_START_DATE, VOTING_END_DATE, affectedKey, 1, miningKey, 3, \"memo\",{from: votingKey});\nawait voting.createVotingForKeys(VOTING_START_DATE+2, VOTING_END_DATE+2, affectedKey, 1, miningKey, 2, \"memo\",{from: votingKey});\nconst activeBallotsLength = await voting.activeBallotsLength();\nvotingId = await voting.activeBallots(activeBallotsLength.toNumber() - 2);\nlet votingIdForSecond = votingId.add(1);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.reject, {from: votingKey}).should.be.fulfilled;\nfalse.should.be.equal(await voting.hasAlreadyVoted(votingId, votingKey2));\nawait voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nfalse.should.be.equal(await voting.getIsFinalized(votingId));\nawait voting.finalize(votingId, {from: votingKey}).should.be.fulfilled;\nnew web3.BigNumber(3).should.be.bignumber.equal(await voting.getBallotType(votingId));\ntrue.should.be.equal(await voting.getIsFinalized(votingId));\nawait voting.finalize(votingId, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.finalize(votingIdForSecond, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nnew web3.BigNumber(2).should.be.bignumber.equal(await voting.getBallotType(votingIdForSecond));\nfalse.should.be.equal(await voting.getIsFinalized(votingIdForSecond));\nawait voting.vote(votingIdForSecond, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 3);\nawait voting.finalize(votingIdForSecond, {from: votingKey}).should.be.fulfilled;\nnew web3.BigNumber(-1).should.be.bignumber.equal(await voting.getProgress(votingIdForSecond))\nnew web3.BigNumber(1).should.be.bignumber.equal(await voting.getProgress(votingId))",
                "err": {},
                "isRoot": false,
                "uuid": "8bbb7e2c-ec1d-430e-85ee-d49bdcac17de",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0fd0f74b-2c91-4428-92ea-4fe4fd5ee004",
              "c2e692d5-fa2b-49fe-b146-416a89e0770d",
              "09c25455-2d90-468e-af74-d36748adb26b",
              "a03cc01f-ce35-4eb3-be2b-d278c284f9ec",
              "a2fe334d-acb7-4876-a5d3-47d0cd517f65",
              "706bb3fc-c4fc-4499-986b-c04bd629ae4e",
              "5db012b5-f466-4b87-b037-11d4dcd1d4d4",
              "e6a07977-4ed8-4386-9a91-33657a85dad6",
              "f03328bd-c8db-4c84-8cd4-56229cbd0874",
              "71e45900-6115-4a3c-8e38-cf0d65eb2449",
              "a400dc06-dc21-4e58-abb6-79eddf6c4f97",
              "8bbb7e2c-ec1d-430e-85ee-d49bdcac17de"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 9897,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "40a01a8e-4ebe-447e-bb25-98af69e98534",
        "title": "Contract: VotingToChangeMinThreshold [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_min_threshold_test.js",
        "file": "/test/voting_to_change_min_threshold_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: VotingToChangeMinThreshold [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 1521,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "a16b09f8-5017-49ad-95c5-f71b8db6fd90",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: VotingToChangeMinThreshold [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 4,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "29b6c191-525d-44e8-9e08-50692db0e133",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: VotingToChangeMinThreshold [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 892,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "poaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony, []);\nproxyStorageMock = await ProxyStorageMock.new(poaNetworkConsensusMock.address);\nkeysManager = await KeysManagerMock.new(proxyStorageMock.address, poaNetworkConsensusMock.address, masterOfCeremony, \"0x0000000000000000000000000000000000000000\");\nballotsStorage = await BallotsStorage.new(proxyStorageMock.address);\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\nvoting = await Voting.new(proxyStorageMock.address);\nawait proxyStorageMock.initializeAddresses(\n  keysManager.address,\n  masterOfCeremony,\n  voting.address,\n  masterOfCeremony,\n  ballotsStorage.address,\n  masterOfCeremony\n);\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey, accounts[1]).should.be.fulfilled;\nawait keysManager.addMiningKey(accounts[2]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey2, accounts[2]).should.be.fulfilled;\nawait keysManager.addMiningKey(accounts[4]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey3, accounts[4]).should.be.fulfilled;\nawait keysManager.addMiningKey(accounts[5]).should.be.fulfilled;\nawait keysManager.addMiningKey(accounts[6]).should.be.fulfilled;\nawait keysManager.addMiningKey(accounts[7]).should.be.fulfilled;\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;",
            "err": {},
            "isRoot": false,
            "uuid": "f61907be-3546-43c8-9b86-a4deb462ae6e",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: VotingToChangeMinThreshold [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "8911aa20-5489-4a4f-a694-8609098e7a1c",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "7bf81128-7d5f-4374-a969-272242e18c22",
            "title": "#createBallotToChangeThreshold",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_min_threshold_test.js",
            "file": "/test/voting_to_change_min_threshold_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #createBallotToChangeThreshold \"before each\" hook",
                "timedOut": false,
                "duration": 12,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nid = await voting.nextBallotId();",
                "err": {},
                "isRoot": false,
                "uuid": "c5a01881-fe2e-4a93-9c1e-aa75a8404726",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #createBallotToChangeThreshold happy path",
                "timedOut": false,
                "duration": 151,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await voting.createBallotToChangeThreshold(VOTING_START_DATE, VOTING_END_DATE, 4, \"memo\",{from: votingKey});\nconst startTime = await voting.getStartTime(id.toNumber());\nconst endTime = await voting.getEndTime(id.toNumber());\nconst keysManagerFromContract = await voting.getKeysManager();\nlet votingState = await voting.votingState(id);\nvotingState.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE),\n  new web3.BigNumber(VOTING_END_DATE),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  false,\n  new web3.BigNumber(1),\n  new web3.BigNumber(0),\n  new web3.BigNumber(3),\n  new web3.BigNumber(4),\n  miningKeyForVotingKey,\n  \"memo\"\n])\nstartTime.should.be.bignumber.equal(VOTING_START_DATE);\nendTime.should.be.bignumber.equal(VOTING_END_DATE);\nkeysManagerFromContract.should.be.equal(keysManager.address);\nlogs[0].event.should.be.equal(\"BallotCreated\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.creator.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "10f68608-e32d-499e-b57b-54a8a7508383",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "proposed value should be more than or equal to 3",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #createBallotToChangeThreshold proposed value should be more than or equal to 3",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallotToChangeThreshold(VOTING_START_DATE, VOTING_END_DATE, 2,\"memo\", {from: votingKey}).should.be.fulfilled.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "71acadd4-e049-4997-b7c4-87aa8fad4193",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "proposed value should not be equal to the same value",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #createBallotToChangeThreshold proposed value should not be equal to the same value",
                "timedOut": false,
                "duration": 74,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallotToChangeThreshold(VOTING_START_DATE, VOTING_END_DATE, 3,\"memo\", {from: votingKey}).should.be.fulfilled.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "64ccbde5-35de-4586-8316-99bb260192ea",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create more ballots than the limit",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #createBallotToChangeThreshold should not let create more ballots than the limit",
                "timedOut": false,
                "duration": 8972,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nconst VOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createBallotToChangeThreshold(VOTING_START_DATE, VOTING_END_DATE, 4,\"memo\", {from: votingKey});\nawait voting.createBallotToChangeThreshold(VOTING_START_DATE, VOTING_END_DATE, 4,\"memo\", {from: votingKey});\n// we have 6 validators, so 200 limit / 6 = 33.3 ~ 33\nnew web3.BigNumber(33).should.be.bignumber.equal(await voting.getBallotLimitPerValidator());\nawait addValidators({proxyStorageMock, keysManager, poaNetworkConsensusMock}); // add 100 validators, so total will be 106 validators\nnew web3.BigNumber(1).should.be.bignumber.equal(await voting.getBallotLimitPerValidator());\nawait voting.createBallotToChangeThreshold(VOTING_START_DATE, VOTING_END_DATE, 4, \"memo\",{from: votingKey}).should.be.rejectedWith(ERROR_MSG)",
                "err": {},
                "isRoot": false,
                "uuid": "87f9bad0-5ee8-4a5a-9843-d4c46fed43db",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "10f68608-e32d-499e-b57b-54a8a7508383",
              "71acadd4-e049-4997-b7c4-87aa8fad4193",
              "64ccbde5-35de-4586-8316-99bb260192ea",
              "87f9bad0-5ee8-4a5a-9843-d4c46fed43db"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 9226,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "4d9138fc-a4c4-4d2d-a095-4343975467e1",
            "title": "#vote",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_min_threshold_test.js",
            "file": "/test/voting_to_change_min_threshold_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote \"before each\" hook",
                "timedOut": false,
                "duration": 194,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nid = await voting.nextBallotId();\nlet validators = await poaNetworkConsensusMock.getValidators();\nawait voting.createBallotToChangeThreshold(VOTING_START_DATE, VOTING_END_DATE, 4, \"memo\",{from: votingKey});",
                "err": {},
                "isRoot": false,
                "uuid": "39f701a8-955d-4eda-b500-276a008d0154",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "should let a validator to vote",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should let a validator to vote",
                "timedOut": false,
                "duration": 121,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.accept, {from: votingKey}).should.be.fulfilled;\nlet progress = await voting.getProgress(id);\nprogress.should.be.bignumber.equal(1);\nlet totalVoters = await voting.getTotalVoters(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(1);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "34f2bba8-bad7-4bba-bb84-80af4b023263",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "reject vote should be accepted",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote reject vote should be accepted",
                "timedOut": false,
                "duration": 169,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nlet progress = await voting.getProgress(id);\nprogress.should.be.bignumber.equal(-1);\nlet totalVoters = await voting.getTotalVoters(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(2);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "ebb6f6e3-b111-431f-92ee-70df0d35c8b3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow multiple voters to vote",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should allow multiple voters to vote",
                "timedOut": false,
                "duration": 293,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\n// add new voter\nawait voting.vote(id, choice.reject, {from: votingKey2}).should.be.fulfilled;\nlet progress = await voting.getProgress(id);\nprogress.should.be.bignumber.equal(-2);\nlet totalVoters = await voting.getTotalVoters(id);\ntotalVoters.should.be.bignumber.equal(2);\nawait voting.vote(id, choice.accept, {from: votingKey3}).should.be.fulfilled;\nprogress = await voting.getProgress(id);\nprogress.should.be.bignumber.equal(-1);\ntotalVoters = await voting.getTotalVoters(id);\ntotalVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "3d4cd934-0940-4dd1-a526-f683293d0bd0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote nonVoting key",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should not let vote nonVoting key",
                "timedOut": false,
                "duration": 40,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "48bba4e2-fed0-4f67-9211-802724db7542",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote before startTime key",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should not let vote before startTime key",
                "timedOut": false,
                "duration": 74,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE - 1);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "962028a5-5c5f-40e3-83f7-ec5da1b03bd0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote after endTime key",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should not let vote after endTime key",
                "timedOut": false,
                "duration": 75,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE + 1);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "1327da9a-604c-4c1d-a749-1d3cd6f144b3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with already voted key",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should not let vote with already voted key",
                "timedOut": false,
                "duration": 158,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "0f62e1be-7c43-4e24-ba59-f288f954e4a7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid choice",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should not let vote with invalid choice",
                "timedOut": false,
                "duration": 142,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, 0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, 3, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "107e3078-e163-44eb-b2fb-22418f2d1278",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid id",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should not let vote with invalid id",
                "timedOut": false,
                "duration": 134,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(99, 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(-3, 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "9f241b0e-a641-4757-9289-041bbd81b6ac",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "34f2bba8-bad7-4bba-bb84-80af4b023263",
              "ebb6f6e3-b111-431f-92ee-70df0d35c8b3",
              "3d4cd934-0940-4dd1-a526-f683293d0bd0",
              "48bba4e2-fed0-4f67-9211-802724db7542",
              "962028a5-5c5f-40e3-83f7-ec5da1b03bd0",
              "1327da9a-604c-4c1d-a749-1d3cd6f144b3",
              "0f62e1be-7c43-4e24-ba59-f288f954e4a7",
              "107e3078-e163-44eb-b2fb-22418f2d1278",
              "9f241b0e-a641-4757-9289-041bbd81b6ac"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1206,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "6635dd8e-5fd6-4235-bed5-741e738b7f57",
            "title": "#finalize",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_min_threshold_test.js",
            "file": "/test/voting_to_change_min_threshold_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #finalize \"before each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();",
                "err": {},
                "isRoot": false,
                "uuid": "698f240a-95b8-4a4b-ae96-96ef23283041",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "doesnot change if it did not pass minimum threshold",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #finalize doesnot change if it did not pass minimum threshold",
                "timedOut": false,
                "duration": 373,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proposedValue = 4;\nvotingId = await voting.nextBallotId();\nawait voting.createBallotToChangeThreshold(VOTING_START_DATE, VOTING_END_DATE, proposedValue, \"memo\",{from: votingKey});\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.accept, {from: votingKey}).should.be.fulfilled;\n// await voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nconst {logs} = await voting.finalize(votingId, {from: votingKey}).should.be.fulfilled;\nactiveBallotsLength = await voting.activeBallotsLength();\nactiveBallotsLength.should.be.bignumber.equal(0);\ntrue.should.be.equal(await voting.getIsFinalized(votingId));\n// Finalized(msg.sender);\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.voter.should.be.equal(votingKey);\nconst votingState = await voting.votingState(votingId);\n\nvotingState.should.be.deep.equal(\n  [\n    new web3.BigNumber(VOTING_START_DATE), //uint256 startTime;\n    new web3.BigNumber(VOTING_END_DATE), //uint256 endTime\n    new web3.BigNumber(1),  //uint256 totalVoters\n    new web3.BigNumber(1), //int progress\n    true,                   //bool isFinalized\n    new web3.BigNumber(3),  //uint8 quorumState\n    new web3.BigNumber(0),  //uint256 index\n    new web3.BigNumber(3),   //uint256 minThresholdOfVoters\n    new web3.BigNumber(proposedValue), // uint256 proposedValue\n    miningKeyForVotingKey,  // creator\n    \"memo\"\n  ]\n)\ntrue.should.be.equal(\n  await voting.hasAlreadyVoted(votingId, votingKey)\n);\nconst minThresholdOfVoters = await ballotsStorage.getBallotThreshold(1);\nminThresholdOfVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "45510286-c65b-4570-9ae3-0015a984db90",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change to proposedValue when quorum is reached",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #finalize should change to proposedValue when quorum is reached",
                "timedOut": false,
                "duration": 850,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proposedValue = 4;\nvotingId = await voting.nextBallotId();\nawait voting.createBallotToChangeThreshold(VOTING_START_DATE, VOTING_END_DATE, proposedValue, \"memo\",{from: votingKey});\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.accept, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(votingId, choice.reject, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nconst {logs} = await voting.finalize(votingId, {from: votingKey}).should.be.fulfilled;\nactiveBallotsLength = await voting.activeBallotsLength();\nactiveBallotsLength.should.be.bignumber.equal(0);\ntrue.should.be.equal(await voting.getIsFinalized(votingId));\n// Finalized(msg.sender);\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.voter.should.be.equal(votingKey);\nconst votingState = await voting.votingState(votingId);\nvotingState.should.be.deep.equal(\n  [\n    new web3.BigNumber(VOTING_START_DATE), //uint256 startTime;\n    new web3.BigNumber(VOTING_END_DATE), //uint256 endTime\n    new web3.BigNumber(3),  //uint256 totalVoters\n    new web3.BigNumber(1), //int progress\n    true,                   //bool isFinalized\n    new web3.BigNumber(2),  //uint8 quorumState\n    new web3.BigNumber(0),  //uint256 index\n    new web3.BigNumber(3),   //uint256 minThresholdOfVoters\n    new web3.BigNumber(proposedValue), // uint256 proposedValue\n    miningKeyForVotingKey,  //creator\n    \"memo\"\n  ]\n)\ntrue.should.be.equal(\n  await voting.hasAlreadyVoted(votingId, votingKey)\n);\ntrue.should.be.equal(\n  await voting.hasAlreadyVoted(votingId, votingKey2)\n);\ntrue.should.be.equal(\n  await voting.hasAlreadyVoted(votingId, votingKey3)\n);\nconst minThresholdOfVoters = await ballotsStorage.getBallotThreshold(1);\nminThresholdOfVoters.should.be.bignumber.equal(proposedValue);\nlet votingForKeys = await VotingForKeys.new(proxyStorageMock.address);\n\nlet nextId = await votingForKeys.nextBallotId();\nawait votingForKeys.createVotingForKeys(VOTING_START_DATE, VOTING_END_DATE, accounts[5], 3, accounts[1], 1, \"memo\", {from: votingKey});\nconst minThresholdVotingForKeys = await votingForKeys.getMinThresholdOfVoters(nextId);\nminThresholdVotingForKeys.should.be.bignumber.equal(proposedValue);",
                "err": {},
                "isRoot": false,
                "uuid": "11760dbc-8e13-4f1f-a3ac-a32cdf2cdac0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevents double finalize",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #finalize prevents double finalize",
                "timedOut": false,
                "duration": 1220,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proposedValue1 = 4;\nlet proposedValue2 = 5;\nawait voting.createBallotToChangeThreshold(VOTING_START_DATE, VOTING_END_DATE, proposedValue1, \"memo\",{from: votingKey});\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait keysManager.addMiningKey(\"0xa6Bf70bd230867c870eF13631D7EFf1AE8Ab85c9\").should.be.fulfilled;\nawait keysManager.addMiningKey(\"0xa6Bf70bd230867c870eF13631D7EFf1AE8Ab85d9\").should.be.fulfilled;\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait voting.createBallotToChangeThreshold(VOTING_START_DATE+2, VOTING_END_DATE+2, proposedValue2, \"memo\",{from: votingKey});\nawait voting.finalize(votingId, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nconst activeBallotsLength = await voting.activeBallotsLength();\nvotingId = await voting.activeBallots(activeBallotsLength.toNumber() - 2);\nlet votingIdForSecond = votingId.add(1);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.reject, {from: votingKey}).should.be.fulfilled;\nfalse.should.be.equal(await voting.hasAlreadyVoted(votingId, votingKey2));\nawait voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nfalse.should.be.equal(await voting.getIsFinalized(votingId));\nawait voting.finalize(votingId, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nnew web3.BigNumber(4).should.be.bignumber.equal(await voting.getProposedValue(votingId));\ntrue.should.be.equal(await voting.getIsFinalized(votingId));\nawait voting.finalize(votingId, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.finalize(votingIdForSecond, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nnew web3.BigNumber(5).should.be.bignumber.equal(await voting.getProposedValue(votingIdForSecond));\nfalse.should.be.equal(await voting.getIsFinalized(votingIdForSecond));\nawait voting.vote(votingIdForSecond, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 3);\nawait voting.finalize(votingIdForSecond, {from: votingKey}).should.be.fulfilled;\nnew web3.BigNumber(-1).should.be.bignumber.equal(await voting.getProgress(votingIdForSecond))\nnew web3.BigNumber(1).should.be.bignumber.equal(await voting.getProgress(votingId))",
                "err": {},
                "isRoot": false,
                "uuid": "9a8b40a2-8569-44f6-b19b-fa2512b0462f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "45510286-c65b-4570-9ae3-0015a984db90",
              "11760dbc-8e13-4f1f-a3ac-a32cdf2cdac0",
              "9a8b40a2-8569-44f6-b19b-fa2512b0462f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2443,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "6c20b43c-f3fd-4027-832a-b484ee8d217a",
        "title": "Contract: VotingToChangeProxyAddress [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_proxy_test.js",
        "file": "/test/voting_to_change_proxy_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: VotingToChangeProxyAddress [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 1346,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "a66139a6-45e5-4512-a223-2acb07ff52d9",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: VotingToChangeProxyAddress [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "70a18d90-e160-4702-9323-38c72aab0fe6",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: VotingToChangeProxyAddress [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 363,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "poaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony, []);\nproxyStorageMock = await ProxyStorageMock.new(poaNetworkConsensusMock.address);\nkeysManager = await KeysManagerMock.new(proxyStorageMock.address, poaNetworkConsensusMock.address, masterOfCeremony, \"0x0000000000000000000000000000000000000000\");\nballotsStorage = await BallotsStorage.new(proxyStorageMock.address);\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\nvoting = await VotingToChangeProxyAddress.new(proxyStorageMock.address);\nvalidatorMetadata = await ValidatorMetadata.new();\nvalidatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, validatorMetadata.address);\nawait proxyStorageMock.initializeAddresses(\n  keysManager.address,\n  masterOfCeremony,\n  masterOfCeremony,\n  voting.address,\n  ballotsStorage.address,\n  validatorMetadataEternalStorage.address\n);",
            "err": {},
            "isRoot": false,
            "uuid": "638091a5-0dc8-4db0-afea-c1628406ba8d",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: VotingToChangeProxyAddress [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "8f2b5035-ecc4-44f6-967a-7be4386c9fad",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "a4280b43-f786-4d1f-8422-b6184cf51da3",
            "title": "#createBallotToChangeProxyAddress",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_proxy_test.js",
            "file": "/test/voting_to_change_proxy_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #createBallotToChangeProxyAddress \"before each\" hook",
                "timedOut": false,
                "duration": 97,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "await keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey, accounts[1]).should.be.fulfilled;\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nid = await voting.nextBallotId();",
                "err": {},
                "isRoot": false,
                "uuid": "03647b5c-94ac-4636-ae31-5c66da06c482",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #createBallotToChangeProxyAddress happy path",
                "timedOut": false,
                "duration": 187,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// uint256 _startTime,\n// uint256 _endTime,\n// address _proposedValue,\n// uint8 _contractType\nconst {logs} = await voting.createBallotToChangeProxyAddress(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], 1, \"memo\", { from: votingKey }\n);\nconst startTime = await voting.getStartTime(id.toNumber());\nconst endTime = await voting.getEndTime(id.toNumber());\nconst keysManagerFromContract = await voting.getKeysManager();\nlet votingState = await voting.votingState(id);\nvotingState.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE),\n  new web3.BigNumber(VOTING_END_DATE),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  false,\n  new web3.BigNumber(1),\n  new web3.BigNumber(0),\n  new web3.BigNumber(1),\n  accounts[5],\n  new web3.BigNumber(1),\n  miningKeyForVotingKey,\n  \"memo\"        \n])\nlet activeBallotsLength = await voting.activeBallotsLength();\nactiveBallotsLength.should.be.bignumber.equal(1);\nlet nextBallotId = await voting.nextBallotId();\nnextBallotId.should.be.bignumber.equal(1);\nstartTime.should.be.bignumber.equal(VOTING_START_DATE);\nendTime.should.be.bignumber.equal(VOTING_END_DATE);\nkeysManagerFromContract.should.be.equal(keysManager.address);\nlogs[0].event.should.be.equal(\"BallotCreated\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.creator.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "d86f037b-25ec-4190-8812-677c3427a0b0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "proposed address should not be 0x0",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #createBallotToChangeProxyAddress proposed address should not be 0x0",
                "timedOut": false,
                "duration": 30,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallotToChangeProxyAddress(VOTING_START_DATE, VOTING_END_DATE, '0x0000000000000000000000000000000000000000', 2, \"memo\",{ from: votingKey }).should.be.fulfilled.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "49359c56-388c-4132-ab9d-071a00ac0340",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "can creates multiple ballots",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #createBallotToChangeProxyAddress can creates multiple ballots",
                "timedOut": false,
                "duration": 257,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const { logs } = await voting.createBallotToChangeProxyAddress(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], 1, \"memo\",{ from: votingKey });\nconst startTime = await voting.getStartTime(id.toNumber());\nconst endTime = await voting.getEndTime(id.toNumber());\nconst keysManagerFromContract = await voting.getKeysManager();\nlet activeBallotsLength = await voting.activeBallotsLength();\nactiveBallotsLength.should.be.bignumber.equal(1);\nlet nextBallotId = await voting.nextBallotId();\nnextBallotId.should.be.bignumber.equal(1);\nawait voting.createBallotToChangeProxyAddress(\n  VOTING_START_DATE + 1, VOTING_END_DATE + 1, accounts[5], 2, \"memo\",{ from: votingKey }\n);\nlet votingState = await voting.votingState(nextBallotId);\nvotingState.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE+1),\n  new web3.BigNumber(VOTING_END_DATE+1),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  false,\n  new web3.BigNumber(1),\n  new web3.BigNumber(1),\n  new web3.BigNumber(1),\n  accounts[5],\n  new web3.BigNumber(2),\n  miningKeyForVotingKey,\n  \"memo\"\n])",
                "err": {},
                "isRoot": false,
                "uuid": "b67c49f4-89d9-4755-87e7-2ca9d84926ef",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create more ballots than the limit",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #createBallotToChangeProxyAddress should not let create more ballots than the limit",
                "timedOut": false,
                "duration": 8750,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nconst VOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createBallotToChangeProxyAddress(VOTING_START_DATE, VOTING_END_DATE, accounts[5], 2, \"memo\",{from: votingKey});\nawait voting.createBallotToChangeProxyAddress(VOTING_START_DATE, VOTING_END_DATE, accounts[5], 2, \"memo\",{from: votingKey});\n// we have 1 validator, so 200 limit / 1 = 200\nnew web3.BigNumber(200).should.be.bignumber.equal(await voting.getBallotLimitPerValidator());\nawait addValidators({proxyStorageMock, keysManager, poaNetworkConsensusMock}); // add 100 validators, so total will be 101 validator\nnew web3.BigNumber(1).should.be.bignumber.equal(await voting.getBallotLimitPerValidator());\nawait voting.createBallotToChangeProxyAddress(VOTING_START_DATE, VOTING_END_DATE, accounts[5], 2, \"memo\",{from: votingKey}).should.be.rejectedWith(ERROR_MSG)",
                "err": {},
                "isRoot": false,
                "uuid": "7599e472-f012-4708-82c1-b90e94e3c3a2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d86f037b-25ec-4190-8812-677c3427a0b0",
              "49359c56-388c-4132-ab9d-071a00ac0340",
              "b67c49f4-89d9-4755-87e7-2ca9d84926ef",
              "7599e472-f012-4708-82c1-b90e94e3c3a2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 9224,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "c39d9dde-64df-4293-a6b0-ff19f8ab9038",
            "title": "#vote",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_proxy_test.js",
            "file": "/test/voting_to_change_proxy_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote \"before each\" hook",
                "timedOut": false,
                "duration": 279,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey, accounts[1]).should.be.fulfilled;\nid = await voting.nextBallotId();\nawait voting.createBallotToChangeProxyAddress(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], 1, \"memo\", { from: votingKey }\n);",
                "err": {},
                "isRoot": false,
                "uuid": "2b3d2499-adfa-4a57-b834-d4bb66cf7682",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "should let a validator to vote",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should let a validator to vote",
                "timedOut": false,
                "duration": 122,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst { logs } = await voting.vote(id, choice.accept, { from: votingKey }).should.be.fulfilled;\nlet progress = await voting.getProgress(id);\nprogress.should.be.bignumber.equal(1);\nlet totalVoters = await voting.getTotalVoters(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(1);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "00764874-52cf-484c-9a0c-51fa69230c4b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "reject vote should be accepted",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote reject vote should be accepted",
                "timedOut": false,
                "duration": 112,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst { logs } = await voting.vote(id, choice.reject, { from: votingKey }).should.be.fulfilled;\nlet progress = await voting.getProgress(id);\nprogress.should.be.bignumber.equal(-1);\nlet totalVoters = await voting.getTotalVoters(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(2);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "3f67ecf9-7675-4174-a6bd-04709b9ddc36",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow multiple voters to vote",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should allow multiple voters to vote",
                "timedOut": false,
                "duration": 571,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.fulfilled;\nawait keysManager.addVotingKey(accounts[3], accounts[1]).should.be.fulfilled;\nawait voting.vote(id, choice.reject, { from: accounts[3] }).should.be.rejectedWith(ERROR_MSG);\n// add new voter\nawait keysManager.addMiningKey(accounts[2]).should.be.fulfilled;\nawait keysManager.addVotingKey(accounts[4], accounts[2]).should.be.fulfilled;\nawait voting.vote(id, choice.reject, { from: accounts[4] }).should.be.fulfilled;\nlet progress = await voting.getProgress(id);\nprogress.should.be.bignumber.equal(-2);\nlet totalVoters = await voting.getTotalVoters(id);\ntotalVoters.should.be.bignumber.equal(2);\nawait keysManager.addMiningKey(accounts[3]).should.be.fulfilled;\nawait keysManager.addVotingKey(accounts[5], accounts[3]).should.be.fulfilled;\nawait voting.vote(id, choice.accept, { from: accounts[5] }).should.be.fulfilled;\nprogress = await voting.getProgress(id);\nprogress.should.be.bignumber.equal(-1);\ntotalVoters = await voting.getTotalVoters(id);\ntotalVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "b32b6647-31bb-4ce0-8899-0dff02708d4d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote nonVoting key",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should not let vote nonVoting key",
                "timedOut": false,
                "duration": 52,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, { from: accounts[0] }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "f4fccdf1-a39d-4d70-a433-2664aa0f7689",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote before startTime key",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should not let vote before startTime key",
                "timedOut": false,
                "duration": 75,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE - 1);\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "afb1d2b9-0e27-4716-a4fd-cfe98b7f892e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote after endTime key",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should not let vote after endTime key",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE + 1);\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "689e69b9-2da7-4585-8878-f7f94908cffb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with already voted key",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should not let vote with already voted key",
                "timedOut": false,
                "duration": 137,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.fulfilled;\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "fc04dd87-7047-4d4e-9d4a-171131673659",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid choice",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should not let vote with invalid choice",
                "timedOut": false,
                "duration": 139,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, 0, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, 3, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "ca7e031e-9cd1-424a-a5e1-8105968ff2b2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid id",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should not let vote with invalid id",
                "timedOut": false,
                "duration": 144,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(99, 1, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(-3, 1, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "09a5ffee-eb13-4195-ad76-91ac26b91112",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "00764874-52cf-484c-9a0c-51fa69230c4b",
              "3f67ecf9-7675-4174-a6bd-04709b9ddc36",
              "b32b6647-31bb-4ce0-8899-0dff02708d4d",
              "f4fccdf1-a39d-4d70-a433-2664aa0f7689",
              "afb1d2b9-0e27-4716-a4fd-cfe98b7f892e",
              "689e69b9-2da7-4585-8878-f7f94908cffb",
              "fc04dd87-7047-4d4e-9d4a-171131673659",
              "ca7e031e-9cd1-424a-a5e1-8105968ff2b2",
              "09a5ffee-eb13-4195-ad76-91ac26b91112"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1443,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "e3897193-474d-4c3e-b78c-2f4091a97b42",
            "title": "#finalize",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_proxy_test.js",
            "file": "/test/voting_to_change_proxy_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize \"before each\" hook",
                "timedOut": false,
                "duration": 384,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey, accounts[1]).should.be.fulfilled;\nawait keysManager.addMiningKey(accounts[6]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey2, accounts[6]).should.be.fulfilled;\nawait keysManager.addMiningKey(accounts[4]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey3, accounts[4]).should.be.fulfilled;\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(voting.address);",
                "err": {},
                "isRoot": false,
                "uuid": "198cd59c-f1cf-4f0a-aaf0-af367b8419bd",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "doesnot change if it did not pass minimum threshold",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize doesnot change if it did not pass minimum threshold",
                "timedOut": false,
                "duration": 415,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proposedValue = 5;\nlet contractType = 1; //keysManager\nvotingId = await voting.nextBallotId();\nawait voting.createBallotToChangeProxyAddress(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], contractType, \"memo\", { from: votingKey }\n);\nawait voting.finalize(votingId, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.accept, { from: votingKey }).should.be.fulfilled;\n// await voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nconst { logs } = await voting.finalize(votingId, { from: votingKey }).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nactiveBallotsLength = await voting.activeBallotsLength();\nactiveBallotsLength.should.be.bignumber.equal(0);\ntrue.should.be.equal(await voting.getIsFinalized(votingId));\n// Finalized(msg.sender);\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.voter.should.be.equal(votingKey);\nconst votingState = await voting.votingState(votingId);\nvotingState.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE),\n  new web3.BigNumber(VOTING_END_DATE),\n  new web3.BigNumber(1), //totalVoters\n  new web3.BigNumber(1), //progress\n  true, //isFinalized\n  new web3.BigNumber(3), //quorumState enum QuorumStates {Invalid, InProgress, Accepted, Rejected}\n  new web3.BigNumber(0), //index\n  new web3.BigNumber(2), //minThreshold\n  accounts[5], //porposedValue\n  new web3.BigNumber(contractType),\n  miningKeyForVotingKey, //creator\n  \"memo\"\n])\ntrue.should.be.equal(\n  await voting.hasAlreadyVoted(votingId, votingKey)\n);\nconst minThresholdOfVoters = await ballotsStorage.getBallotThreshold(1);\nminThresholdOfVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "d3ef32e0-4fd9-4010-9fdd-f0cf9372893d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change getKeysManager address",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change getKeysManager address",
                "timedOut": false,
                "duration": 579,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 1;\nlet newAddress = accounts[5];\nawait deployAndTest({contractType, newAddress})\nnewAddress.should.be.equal(await proxyStorageMock.getKeysManager());",
                "err": {},
                "isRoot": false,
                "uuid": "c844e037-035a-41a1-bc62-46ba79dfcc56",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change getVotingToChangeKeys",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change getVotingToChangeKeys",
                "timedOut": false,
                "duration": 636,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 2;\nlet newAddress = accounts[5];\nawait deployAndTest({contractType, newAddress})\nnewAddress.should.be.equal(await proxyStorageMock.getVotingToChangeKeys());",
                "err": {},
                "isRoot": false,
                "uuid": "229e5c8b-2f48-448b-918a-b60a8deb6868",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change getVotingToChangeMinThreshold",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change getVotingToChangeMinThreshold",
                "timedOut": false,
                "duration": 606,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 3;\nlet newAddress = accounts[5];\nawait deployAndTest({contractType, newAddress})\nnewAddress.should.be.equal(await proxyStorageMock.getVotingToChangeMinThreshold());",
                "err": {},
                "isRoot": false,
                "uuid": "bec77b11-2886-4487-b786-13fd838202aa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change getVotingToChangeProxy",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change getVotingToChangeProxy",
                "timedOut": false,
                "duration": 612,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 4;\nlet newAddress = accounts[5];\nawait deployAndTest({contractType, newAddress})\nnewAddress.should.be.equal(await proxyStorageMock.getVotingToChangeProxy());",
                "err": {},
                "isRoot": false,
                "uuid": "76fed06b-75bc-4c01-9aa5-3250d9e1b036",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change getBallotsStorage",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change getBallotsStorage",
                "timedOut": false,
                "duration": 612,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 5;\nlet newAddress = accounts[5];\nawait deployAndTest({contractType, newAddress})\nnewAddress.should.be.equal(await proxyStorageMock.getBallotsStorage());",
                "err": {},
                "isRoot": false,
                "uuid": "5059adc6-6ab9-41ad-ac9b-3e820154ad80",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change ValidatorMetadata implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change ValidatorMetadata implementation",
                "timedOut": false,
                "duration": 704,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 7;\nlet validatorMetadataNew = await ValidatorMetadata.new();\nlet newAddress = validatorMetadataNew.address;\nawait deployAndTest({contractType, newAddress})\nlet eternalProxyAddress = await proxyStorageMock.getValidatorMetadata();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation());",
                "err": {},
                "isRoot": false,
                "uuid": "69a9b54e-256d-4a27-b8aa-04cfa0fe561a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change ValidatorMetadata storage",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change ValidatorMetadata storage",
                "timedOut": false,
                "duration": 689,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 8;\nlet validatorMetadataEternalStorageNew = await EternalStorageProxy.new(proxyStorageMock.address, validatorMetadata.address);\nlet newAddress = validatorMetadataEternalStorageNew.address;\nawait deployAndTest({contractType, newAddress})\nnewAddress.should.be.equal(await proxyStorageMock.getValidatorMetadata());",
                "err": {},
                "isRoot": false,
                "uuid": "8cc17d72-ef0f-4170-af45-f1cbbc9ed615",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevents double finalize",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize prevents double finalize",
                "timedOut": false,
                "duration": 970,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newAddress1 = accounts[4];\nlet newAddress2 = accounts[5];\nlet contractType1 = 4;\nlet contractType2 = 5;\nawait voting.createBallotToChangeProxyAddress(\n  VOTING_START_DATE, VOTING_END_DATE, newAddress1, contractType1, \"memo\", { from: votingKey }\n);\nawait voting.createBallotToChangeProxyAddress(\n  VOTING_START_DATE+2, VOTING_END_DATE+2, newAddress2, contractType2, \"memo\", { from: votingKey }\n);\n  \nconst activeBallotsLength = await voting.activeBallotsLength();\nvotingId = await voting.activeBallots(activeBallotsLength.toNumber() - 2);\nlet votingIdForSecond = votingId.add(1);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.reject, {from: votingKey}).should.be.fulfilled;\nfalse.should.be.equal(await voting.hasAlreadyVoted(votingId, votingKey2));\nawait voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nfalse.should.be.equal(await voting.getIsFinalized(votingId));\nawait voting.finalize(votingId, {from: votingKey}).should.be.fulfilled;\ntrue.should.be.equal(await voting.getIsFinalized(votingId));\nawait voting.finalize(votingId, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.finalize(votingIdForSecond, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal(await voting.getIsFinalized(votingIdForSecond));\nawait voting.vote(votingIdForSecond, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 3);\nawait voting.finalize(votingIdForSecond, {from: votingKey}).should.be.fulfilled;\nnew web3.BigNumber(-1).should.be.bignumber.equal(await voting.getProgress(votingIdForSecond))\nnew web3.BigNumber(1).should.be.bignumber.equal(await voting.getProgress(votingId))\nlet votingState1 = await voting.votingState(votingId);\nvotingState1.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE),\n  new web3.BigNumber(VOTING_END_DATE),\n  new web3.BigNumber(3), //totalVoters\n  new web3.BigNumber(1), //progress\n  true, //isFinalized\n  new web3.BigNumber(2), //quorumState enum QuorumStates {Invalid, InProgress, Accepted, Rejected}\n  new web3.BigNumber(0), //index\n  new web3.BigNumber(2), //minThreshold\n  newAddress1, //proposedValue\n  new web3.BigNumber(contractType1),\n  miningKeyForVotingKey, //creator\n  \"memo\"\n])\nlet votingState2 = await voting.votingState(votingIdForSecond);\nvotingState2.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE+2),\n  new web3.BigNumber(VOTING_END_DATE+2),\n  new web3.BigNumber(1), //totalVoters\n  new web3.BigNumber(-1), //progress\n  true, //isFinalized\n  new web3.BigNumber(3), //quorumState enum QuorumStates {Invalid, InProgress, Accepted, Rejected}\n  new web3.BigNumber(0), //index\n  new web3.BigNumber(2), //minThreshold\n  newAddress2, //proposedValue\n  new web3.BigNumber(contractType2),\n  miningKeyForVotingKey, //creator\n  \"memo\"\n])",
                "err": {},
                "isRoot": false,
                "uuid": "ed78af52-f84c-4d7b-8c0b-dc45d977c5dc",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d3ef32e0-4fd9-4010-9fdd-f0cf9372893d",
              "c844e037-035a-41a1-bc62-46ba79dfcc56",
              "229e5c8b-2f48-448b-918a-b60a8deb6868",
              "bec77b11-2886-4487-b786-13fd838202aa",
              "76fed06b-75bc-4c01-9aa5-3250d9e1b036",
              "5059adc6-6ab9-41ad-ac9b-3e820154ad80",
              "69a9b54e-256d-4a27-b8aa-04cfa0fe561a",
              "8cc17d72-ef0f-4170-af45-f1cbbc9ed615",
              "ed78af52-f84c-4d7b-8c0b-dc45d977c5dc"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 5823,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}